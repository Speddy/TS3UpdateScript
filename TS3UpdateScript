#!/usr/bin/env bash
# Save stdin to file descriptor 5
exec 5<&0
#
# About: This is the most widely used and fastest shell script to update all your TeamSpeak 3 server instances.
# Author: https://github.com/Sebi94nbg
# Project: https://github.com/TS3Tools/TS3UpdateScript
# facebook: www.facebook.com/TS3Tools
# License: GNU GPLv3
#  _______ _____ ____  _              _
# |__   __/ ____|___ \| |            | |
#    | | | (___   __) | |_ ___   ___ | |___
#    | |  \___ \ |__ <| __/ _ \ / _ \| / __|
#    | |  ____) |___) | || (_) | (_) | \__ \
#    |_| |_____/|____/ \__\___/ \___/|_|___/
#
# Donations: https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=7ZRXLSC2UBVWE
#

# DO NOT REMOVE OR CHANGE
SOFTWARE_ABOUT="This is the most widely used and fastest shell script to update all your TeamSpeak 3 server instances."
SOFTWARE_AUTHOR="https://github.com/Sebi94nbg"
SOFTWARE_HOMEPAGE="https://github.com/TS3Tools/TS3UpdateScript"
SOFTWARE_FACEBOOK="www.facebook.com/TS3Tools"
SOFTWARE_LICENSE="GNU GPLv3"

# Code structure:
#	1) COLOURS
#	2) FUNCTIONS
#	3) MAIN PROGRAM
#	3) MENU / HELP
#	4) Call to main()
#		a) SELFTESTS
#		b) COLLECTING INFORMATION (if all selftests were successfull)
#		c) VALIDATION (if all selftests were successfull)
#		d) EXECUTION MECHANISM (if all selftests were successfull)
#		e) CLEANUP
#		f) STATISTICS

# Get screen width
export TERM=xterm
let "COL = $(tput cols) - 10"
let "BCOL = $(tput cols) - 23"

##
## COLOURS
##

SCurs='\e[s';           # Save Cursor
MCurs="\e[${COL}C";     # Move Cursor
MCursB="\e[45C";        # Move Cursor a bit
MCursBB="\e[${BCOL}C";  # Move Cursor a bit more
RCurs='\e[u';           # Reset Cursor
RCol='\e[0m';           # Text Reset

# Regular           Bold                Underline           High Intensity      BoldHigh Intens     Background          High Intensity Backgrounds
Bla='\e[0;30m';     BBla='\e[1;30m';    UBla='\e[4;30m';    IBla='\e[0;90m';    BIBla='\e[1;90m';   On_Bla='\e[40m';    On_IBla='\e[0;100m';
Red='\e[0;31m';     BRed='\e[1;31m';    URed='\e[4;31m';    IRed='\e[0;91m';    BIRed='\e[1;91m';   On_Red='\e[41m';    On_IRed='\e[0;101m';
Gre='\e[0;32m';     BGre='\e[1;32m';    UGre='\e[4;32m';    IGre='\e[0;92m';    BIGre='\e[1;92m';   On_Gre='\e[42m';    On_IGre='\e[0;102m';
Yel='\e[0;33m';     BYel='\e[1;33m';    UYel='\e[4;33m';    IYel='\e[0;93m';    BIYel='\e[1;93m';   On_Yel='\e[43m';    On_IYel='\e[0;103m';
Blu='\e[0;34m';     BBlu='\e[1;34m';    UBlu='\e[4;34m';    IBlu='\e[0;94m';    BIBlu='\e[1;94m';   On_Blu='\e[44m';    On_IBlu='\e[0;104m';
Pur='\e[0;35m';     BPur='\e[1;35m';    UPur='\e[4;35m';    IPur='\e[0;95m';    BIPur='\e[1;95m';   On_Pur='\e[45m';    On_IPur='\e[0;105m';
Cya='\e[0;36m';     BCya='\e[1;36m';    UCya='\e[4;36m';    ICya='\e[0;96m';    BICya='\e[1;96m';   On_Cya='\e[46m';    On_ICya='\e[0;106m';
Whi='\e[0;37m';     BWhi='\e[1;37m';    UWhi='\e[4;37m';    IWhi='\e[0;97m';    BIWhi='\e[1;97m';   On_Whi='\e[47m';    On_IWhi='\e[0;107m';

# Detect absolute and full path as well as filename of this script
cd "$(dirname $0)"
ABSOLUTE_PATH=$(dirname $(realpath $0))
SCRIPT_NAME=$(basename $0)
cd - > /dev/null

##
## FUNCTIONS
##

# Clear terminal screen
function clearTerminalScreen() {
	clear 2> /dev/null
}

# Check, if bash-completion is installed
# Return: 0:boolean or 1:boolean
function isBashCompletionInstalled() {
	if [ -f /etc/bash_completion.d/ts3updatescript ]; then
		if [[ "$(stat --format='%U' /etc/bash_completion.d/ts3updatescript)" == "root" ]] && [[ "$(stat --format='%G' /etc/bash_completion.d/ts3updatescript)" == "root" ]]; then
			return 0;
		else
			return 1;
		fi
	else
		return 1;
	fi
}

# Sets up bash-completion
# Return: 0:boolean or 1:boolean
function setUpBashCompletion() {
	if [ -f /etc/bash_completion.d/ts3updatescript ]; then
		if [[ ! $(chown root:root /etc/bash_completion.d/ts3updatescript) ]]; then
			return 0;
		else
			return 1;
		fi
	else
		if [[ ! $(cp ${ABSOLUTE_PATH}/.ts3updatescript /etc/bash_completion.d/ts3updatescript) ]]; then
			if [[ ! $(chown root:root /etc/bash_completion.d/ts3updatescript) ]]; then
				return 0;
			else
				return 1;
			fi
		else
			return 1;
		fi
	fi
}

# Replaces single configuration files with a single on
function migrateMultipleConfigFilesToOne() {
	SINGLE_CONF_FILE='${ABSOLUTE_PATH}/configs/config.all'

	for config_file in $(find ${ABSOLUTE_PATH}/configs/ -type f -exec basename {} \; | sort); do
		if [[ ${config_file} == "administrator_eMail.txt" ]]; then
			ADMINISTRATOR_EMAILS="ADMINISTRATOR_EMAILS=$(< ${ABSOLUTE_PATH}/configs/administrator_eMail.txt)";
		elif [[ ${config_file} == "ignore_clients.txt" ]]; then
			IGNORE_CLIENTS="IGNORE_CLIENTS=$(tr '\n' ',' < ${ABSOLUTE_PATH}/configs/ignore_clients.txt)";
		elif [[ ${config_file} == "ignore_servergroups.txt" ]]; then
			IGNORE_SERVERGROUPS="IGNORE_SERVERGROUPS=$(tr '\n' ',' < ${ABSOLUTE_PATH}/configs/ignore_servergroups.txt)";
		elif [[ ${config_file} == "latestStableRelease.txt" ]]; then
			LATEST_STABLE_RELEASE="LATEST_STABLE_RELEASE=$(< ${ABSOLUTE_PATH}/configs/latestStableRelease.txt)";
		elif [[ ${config_file} == "displayed_user_name.txt" ]]; then
			DISPLAYED_USERNAME="DISPLAYED_USERNAME=$(< ${ABSOLUTE_PATH}/configs/displayed_user_name.txt)";
		elif [[ ${config_file} == "update_text.txt" ]]; then
			UPDATE_TEXT="UPDATE_TEXT=$(< ${ABSOLUTE_PATH}/configs/update_text.txt)";
		elif [[ ${config_file} == "auto_update_text.txt" ]]; then
			CRON_UPDATE_TEXT="CRON_UPDATE_TEXT=$(< ${ABSOLUTE_PATH}/configs/auto_update_text.txt)";
		fi

		echo -e "${ADMINISTRATOR_EMAILS}\n${LATEST_STABLE_RELEASE}\n${DISPLAYED_USERNAME}\n${UPDATE_TEXT}\n${CRON_UPDATE_TEXT}\n${IGNORE_CLIENTS}\n${IGNORE_SERVERGROUPS}\n" > ${SINGLE_CONF_FILE};

		rm "${ABSOLUTE_PATH}/configs/${config_file}";
	done
}

# Checks list of given software packages
# Par X: package:string
# Return: 0:boolean or 1:boolean
function checkdeps() {
	CHECKDEPS_FAILED=0;

	for cmd; do
		package_cmd=$(echo $cmd | cut -d ':' -f 1)
		package=$(echo $cmd | cut -d ':' -f 2)

		if [[ -z "$package" ]]; then
			package=$cmd
		fi

		command -v >&- "$package_cmd" || {
			printf >&2 "$package is not found. Please install this package\n" >> SELF_TEST_STATUS.txt;
			CHECKDEPS_FAILED=1;
		}
	done

	if [[ "${CHECKDEPS_FAILED}" -eq 1 ]]; then
		echo -n "1";
	fi

	return 0;
}

# Writes BPA disable options to config file and displays BPA message, if allowed
# Par 1: BPAText:string
# Return: BPAText:string or 1:boolean
function displayBPAText() {
	BPA_CONFIG_FILE="${ABSOLUTE_PATH}/configs/config.bpa"
	BPA_TEXT="${1}"
	BPA_TEXT_VARIABLE_NAME=$(grep "${BPA_TEXT}" ${ABSOLUTE_PATH}/languages/verified/*.conf | cut -d ':' -f 2 | cut -d '=' -f 1)
	BPA_TYPE="RECOMMENDATION"

	if [[ "${BPA_TEXT_VARIABLE_NAME}" == "TXT_COLLECTING_INFORMATION_OWNER_ROOT_PERMISSIONS_INFO" ]]; then
		BPA_OPTION="OWNER_ROOT_PERMISSIONS_INFO"
	elif [[ "${BPA_TEXT_VARIABLE_NAME}" == "TXT_COLLECTING_INFORMATION_GROUP_ROOT_PERMISSIONS_INFO" ]]; then
		BPA_OPTION="GROUP_ROOT_PERMISSIONS_INFO"
	elif [[ "${BPA_TEXT_VARIABLE_NAME}" == "TXT_COLLECTING_INFORMATION_IS_SHELL_VALID_FAILED" ]]; then			
		BPA_OPTION="IS_SHELL_VALID_FAILED"
		BPA_TYPE="WARNING"
	elif [[ "${BPA_TEXT_VARIABLE_NAME}" == "TXT_COLLECTING_INFORMATION_OWNER_DETECTION_FAILED" ]]; then			
		BPA_OPTION="OWNER_DETECTION_FAILED"
	elif [[ "${BPA_TEXT_VARIABLE_NAME}" == "TXT_COLLECTING_INFORMATION_OWNER_USER_ID_DETECTION_FAILED" ]]; then	
		BPA_OPTION="OWNER_USER_ID_DETECTION_FAILED"
	elif [[ "${BPA_TEXT_VARIABLE_NAME}" == "TXT_COLLECTING_INFORMATION_GROUP_DETECTION_FAILED" ]]; then			
		BPA_OPTION="GROUP_DETECTION_FAILED"
	elif [[ "${BPA_TEXT_VARIABLE_NAME}" == "TXT_COLLECTING_INFORMATION_GROUP_GROUP_ID_DETECTION_FAILED" ]]; then
		BPA_OPTION="GROUP_GROUP_ID_DETECTION_FAILED"
	elif [[ "${BPA_TEXT_VARIABLE_NAME}" == "TXT_COLLECTING_INFORMATION_IS_FILES_STORAGE_EXTERNAL_FAILED" ]]; then
		BPA_OPTION="IS_FILES_STORAGE_EXTERNAL_FAILED"
		BPA_TYPE="WARNING"
	elif [[ "${BPA_TEXT_VARIABLE_NAME}" == "TXT_COLLECTING_INFORMATION_SYSTEM_LOCALE" ]]; then
		BPA_OPTION="SYSTEM_LOCALE"
		BPA_TYPE="WARNING"
	fi

	if [[ ! -f "${BPA_CONFIG_FILE}" ]]; then
		echo "# Disable BPA messages by replacing 'false' with 'true'" > ${BPA_CONFIG_FILE};
	fi

	BPA_OPTION_COUNT=$(grep -c "${BPA_OPTION}=" ${BPA_CONFIG_FILE})

	if [[ "${BPA_OPTION_COUNT}" -eq 0 ]]; then
		echo "${BPA_OPTION}=false" >> ${BPA_CONFIG_FILE};

		if [[ $? -eq 0 ]]; then
			echo "${BPA_TEXT}" >> COLLECTING_INFORMATION_STATUS.txt;

			if [[ $? -eq 0 ]]; then
				if [[ "${BPA_TYPE}" == "RECOMMENDATION" ]]; then
					COLLECTING_INFORMATION_STATUS=1;
				fi
				return 0;
			fi
		fi
	else
		BPA_OPTION_VALUE=$(grep "${BPA_OPTION}=" ${BPA_CONFIG_FILE} | cut -d '=' -f 2 | tr '[:lower:]' '[:upper:]')

		if [[ "${BPA_OPTION_VALUE}" != "TRUE" ]]; then
			echo "${BPA_TEXT}" >> COLLECTING_INFORMATION_STATUS.txt;

			if [[ $? -eq 0 ]]; then
				if [[ "${BPA_TYPE}" == "RECOMMENDATION" ]]; then
					COLLECTING_INFORMATION_STATUS=1;
				fi
				return 0;
			fi
		fi
	fi

	return 1;
}

# Returns time difference
# Return: Difference:integer or 1:boolean
function getTimeDifference() {
	DIFFERENCE=$(($2-$1))

	if [[ -n "$DIFFERENCE" ]]; then
		echo -n "$DIFFERENCE";
	else
		return 1;
	fi
}

# Test internet connectivity
# Par 1: Host:string
# Return: 0:boolean or 1:boolean
function testInternetConnectivity() {
	if [[ $(ping -w 1 "$1" 2> /dev/null) ]]; then
		return 0;
	else
		return 1;
	fi
}

# Get current script version
# Return: CurrentScriptVersion:string or 1:boolean
function getCurrentScriptVersion() {
	CURRENT_SCRIPT_VERSION="$(grep Version ${ABSOLUTE_PATH}/docs/CHANGELOG.md | head -1 | cut -d ' ' -f 3 | tr -d '[[:space:]]')"

	if [[ -n "$CURRENT_SCRIPT_VERSION" ]]; then
		echo -n "$CURRENT_SCRIPT_VERSION";
	else
		return 1;
	fi
}

# Get latest script version
# Return: LatestScriptVersion:string or 1:boolean
function getLatestScriptVersion() {
	LATEST_SCRIPT_VERSION="$(wget -t 1 -T 1 https://raw.githubusercontent.com/TS3Tools/TS3UpdateScript/main/docs/CHANGELOG.md --no-check-certificate -q -O - | grep Version | head -1 | cut -d ' ' -f 3 | tr -d '[[:space:]]')"

	if [[ -n "$LATEST_SCRIPT_VERSION" ]]; then
		echo -n "$LATEST_SCRIPT_VERSION";
	else
		return 1;
	fi
}

# Updates TS3UpdateScript to the latest version
# Return: 0:boolean or 1:boolean
function updateTS3UpdateScript() {
	if [ ! "$(bash ${ABSOLUTE_PATH}/.updateScript.sh &)" ]; then
		return 0;
	else
		return 1;
	fi
}

# Detect known cron.d path
# Return: KnownPath:string or 1:boolean
function detectKnownCronDPath() {
	if [[ -d "/etc/cron.d/" ]]; then
		# Debian, Ubuntu,...
		echo -n "/etc/cron.d/";
	elif [[ -d "/etc/fcron.cyclic/" ]]; then
		# IPFire
		echo -n "/etc/fcron.cyclic/";
	else
		return 1;
	fi
}

# Check if the settings of the script have been changed
# Return: 0:boolean or 1:boolean
function scriptSettingsChanged() {
	ADMIN_EMAIL_MD5SUM=$(grep ADMINISTRATOR_EMAILS "${ABSOLUTE_PATH}/configs/config.all" | cut -d '=' -f 2 | md5sum | cut -d ' ' -f 1)

	if [[ "$ADMIN_EMAIL_MD5SUM" != "160dfa42c0cb8e25311b6aff3a4d5361" ]]; then
		return 0;
	else
		return 1;
	fi
}

# Get latest TS3 server version by file
# Return: ServerVersion:string or 1:boolean
function getLatestTSServerVersionByFile() {
	TS3_SERVER_VERSION=$(grep LATEST_STABLE_RELEASE "${ABSOLUTE_PATH}/configs/config.all" | cut -d "=" -f 2)

	if [[ -n "$TS3_SERVER_VERSION" ]]; then
		echo -n "$TS3_SERVER_VERSION";
	else
		return 1;
	fi
}

# Get latest beta TS3 server version
# Return: ServerVersion:string or 1:boolean
function getLatestBetaTS3ServerVersion() {
	wget -t 1 -T 3 'https://files.teamspeak-services.com/pre_releases/server/' -q -O - | grep -Ei 'a href="[0-9]+' | grep -Eo ">(.*)<" | tr -d ">" | tr -d "<" | uniq | sort -V -r | grep -iv "exp" > BETA_RELEASES.txt

	if [[ $? -ne 0 ]]; then
		return 1;
	fi

	while read release; do
		wget -t 1 -T 1 --spider -q "https://files.teamspeak-services.com/pre_releases/server/${release}/teamspeak3-server_linux_amd64-${release}.tar.bz2"

		if [[ $? == 0 ]]; then
			TS3_SERVER_VERSION="$release"
			# Break while-loop, if the latest release could be found
			break
		fi

		RELEASE_NUMBER=$(echo "$release" | grep -Eo '^[0-9\.?]+')

		wget -t 1 -T 1 --spider -q "https://files.teamspeak-services.com/pre_releases/server/${release}/teamspeak3-server_linux_amd64-${RELEASE_NUMBER}.tar.bz2"

		if [[ $? == 0 ]]; then
			TS3_SERVER_VERSION="$release"
			# Break while-loop, if the latest release could be found
			break
		fi
	done < BETA_RELEASES.txt

	rm BETA_RELEASES.txt

	if [[ -n "$TS3_SERVER_VERSION" ]]; then
		echo -n "$TS3_SERVER_VERSION";
	else
		return 1;
	fi
}

# Get latest stable TS3 server version
# Return: ServerVersion:string or 1:boolean
function getLatestStableTS3ServerVersion() {
	TS3_SERVER_VERSION="";

	if [[ $(checkdeps jshon) -eq 0 ]]; then
		wget -t 1 -T 1 --spider -q "https://www.teamspeak.com/versions/server.json"

		if [[ $? == 0 ]]; then
			TS3_SERVER_VERSION=$(wget -t 1 -T 3 https://www.teamspeak.com/versions/server.json -q -O - | jshon -e linux -e x86_64 -e version | tr -d '"')
		fi
	fi

	if [[ $(checkdeps jshon) -eq 1 ]] || [[ -z "${TS3_SERVER_VERSION}" ]]; then
		wget -t 1 -T 3 'https://files.teamspeak-services.com/releases/server/' -q -O - | grep -Ei 'a href="[0-9]+' | grep -Eo ">(.*)<" | tr -d ">" | tr -d "<" | uniq | sort -V -r > STABLE_RELEASES.txt

		if [[ $? -ne 0 ]]; then
			return 1;
		fi

		while read release; do
			wget -t 1 -T 1 --spider -q "https://files.teamspeak-services.com/releases/server/${release}/teamspeak3-server_linux_amd64-${release}.tar.bz2"

			if [[ $? == 0 ]]; then
				TS3_SERVER_VERSION="$release"
				# Break while-loop, if the latest release could be found
				break
			fi
		done < STABLE_RELEASES.txt

		rm STABLE_RELEASES.txt
	fi

	if [[ -n "$TS3_SERVER_VERSION" ]]; then
		echo -n "$TS3_SERVER_VERSION";
	else
		return 1;
	fi
}

# Get TS3 server mirror links for download
# Par 1: platform:string
# Par 2: architecture:string
# Par 3: LatestTS3ServerVersion:string
# Return: downloadMirrorLinks:string or 1:boolean (mirror1|mirror2)
function getDownloadMirrorLink() {
	PLATFORM="${1}"
	if [[ "${2}" == "amd64" ]]; then
		ARCHITECTURE="x86_64";
	else
		ARCHITECTURE="x86";
	fi
	RELEASE_VERSION="${3}"

	TEAMSPEAK_MIRROR_LINK="";

	if [[ $(checkdeps jshon) -eq 0 ]]; then
		wget -t 1 -T 1 --spider -q "https://www.teamspeak.com/versions/server.json"

		if [[ $? == 0 ]]; then
			TEAMSPEAK_MIRROR_LINK=$(wget -t 1 -T 3 https://www.teamspeak.com/versions/server.json -q -O - | jshon -e ${PLATFORM} -e ${ARCHITECTURE} -e mirrors -e "teamspeak.com" | tr -d '"' | tr -d '\\')

			# Set specific version
			TEAMSPEAK_MIRROR_LINK=$(echo -n "$TEAMSPEAK_MIRROR_LINK" | sed -E 's/([\/\-])[0-9\.?]+([\/\.])/\1'${3}'\2/g')
		fi
	else
		if [[ "${ARCHITECTURE}" == "x86" ]]; then
			TEAMSPEAK_MIRROR_LINK="https://files.teamspeak-services.com/releases/server/${RELEASE_VERSION}/teamspeak3-server_${PLATFORM}_x86-${RELEASE_VERSION}.tar.bz2"
		else
			TEAMSPEAK_MIRROR_LINK="https://files.teamspeak-services.com/releases/server/${RELEASE_VERSION}/teamspeak3-server_${PLATFORM}_amd64-${RELEASE_VERSION}.tar.bz2"
		fi
	fi

	# Make sure, that the file can be downloaded from the mirror(s)
	MIRROR_LIST="";
	wget -t 1 -T 1 --spider -q "${TEAMSPEAK_MIRROR_LINK}"
	if [[ $? == 0 ]]; then
		MIRROR_LIST="${TEAMSPEAK_MIRROR_LINK}";
	fi

	if [[ -n "$MIRROR_LIST" ]]; then
		echo -n "${MIRROR_LIST}";
	else
		return 1;
	fi
}

# Get latest TS3 server version (stable by default)
# Return: ServerVersion:string or 1:boolean
function getLatestTSServerVersion() {
	TS3_SERVER_VERSION=0;

	if [[ "$PAR_SET_RELEASE" -eq 1 ]]; then
		# Release by file
		TS3_SERVER_VERSION="$(getLatestTSServerVersionByFile)";
	elif [[ "$PAR_BETA_RELEASE" -eq 1 ]]; then
		# Beta release
		TS3_SERVER_VERSION="$(getLatestBetaTS3ServerVersion)";
	else
		# Stable release
		TS3_SERVER_VERSION="$(getLatestStableTS3ServerVersion)";
	fi

	if [[ -n "$TS3_SERVER_VERSION" ]] && [[ "$TS3_SERVER_VERSION" != "1" ]]; then
		echo -n "$TS3_SERVER_VERSION";
	else
		return 1;
	fi
}

# Find all TeamSpeak 3 server instances
# Return: 0:boolean or 1:boolean
function findTS3ServerInstances() {
	TEMP_BACKUP_DIR=$(getTempBackupDir)
	PERSISTENT_BACKUP_DIR=$(getPersistentBackupDir)

	if [[ "$PAR_PATH_DIRECTORY" == "/" ]]; then
		find / -name 'ts3server_startscript.sh' 2> /dev/null | grep -Eiv "${TEMP_BACKUP_DIR}/TS3Tools/TS3UpdateScript|${PERSISTENT_BACKUP_DIR}/TS3Tools/TS3UpdateScript" | sort > TS3InstancePaths.txt
	else
		echo "$PAR_PATH_DIRECTORY/ts3server_startscript.sh" > TS3InstancePaths.txt
	fi

	if [[ -s TS3InstancePaths.txt ]]; then
		return 0;
	else
		return 1;
	fi
}

# Returns the real root directory of the TS3 server (required for ExaGear support)
# Par 1: TeamSpeakRootDirectory:String
# Return: realTeamSpeakRootDirectory:String
function findRealTS3RootDirectory() {
	if [[ -d "/opt/exagear/" ]]; then
		EXAGEAR_ENVIRONMENT="$(find /opt/exagear/images/ -maxdepth 1 -type d ! -path /opt/exagear/images/)"
		EXAGEAR_ENVIRONMENT_ESCAPED=$(echo -n "${EXAGEAR_ENVIRONMENT}" | sed -r 's/\//\\\//g')
		FOUND_TEAMSPEAK_DIRECTORY=$(grep -E "${1}" TS3InstancePaths.txt | sed 's/'${EXAGEAR_ENVIRONMENT_ESCAPED}'//' | sed 's/ts3server_startscript.sh//g')
		TEAMSPEAK_ROOT_DIRECTORY="${EXAGEAR_ENVIRONMENT}${FOUND_TEAMSPEAK_DIRECTORY}"
	else
		TEAMSPEAK_ROOT_DIRECTORY="${1}/"
	fi

	echo -n "${TEAMSPEAK_ROOT_DIRECTORY}";
}

# If one more lines containing 'The system locale is set to' are in the instance log, it will return 1
# Par 1: TeamSpeakRootDirectory:String
# Return: 1:boolean or 0:boolean
function checkSystemLocale() {
	INSTANCE_LOG_FILE="$(find $(getTS3ServerInstanceLogPath ${1}) -name *_0.log | sort -nr | head -1)"
	COUNT_LOCALE_MESSAGE=$(grep -E "The system locale is set to" ${INSTANCE_LOG_FILE} | wc -l)

	if [[ "${COUNT_LOCALE_MESSAGE}" -ge 1 ]]; then
		return 1;
	else
		return 0;
	fi
}

# Check serveradmin password
# Par 1: ServerQueryIP:string
# Par 2: ServerQueryPort:string
# Par 3: TeamSpeakRootDirectory:String
# Return: 0:boolean or 1:boolean
function checkServeradminPassword() {
	if [ -f "${3}/password-file" ]; then
		mv "${3}/password-file" "${3}/.password-file"
		chmod 0 "${3}/.password-file"
	fi

	if [ -f "${3}/.password-file" ]; then
		SERVERADMIN_PASSWORD=$(cat "${3}/.password-file")
		chown root:root "${3}/.password-file"
	else
		echo "verySecretServeradminPassword" > "${3}/.password-file";
		chmod 0 "${3}/.password-file"
		chown root:root "${3}/.password-file"
		return 1;
	fi

	(
		cat <<- LOGIN
			spawn telnet "$1" "$2"
			expect "Welcome to the TeamSpeak 3 ServerQuery"
			send {login serveradmin ${SERVERADMIN_PASSWORD}}
			expect "login serveradmin"
			send "\r"
			expect "error id="
			send "\rlogout\r"
			expect "error id="
			send "quit\r"
		LOGIN
	) | expect 2> /dev/null | grep -Eo "error id=[0-9]+ msg=[a-z]+" | head -1 | grep -Eo "=[a-z]+" | grep -Eo "ok" > RESULT.txt

	RESULT="$(cat RESULT.txt)"

	rm RESULT.txt

	if [[ "$RESULT" == "ok" ]]; then
		return 0;
	else
		return 1;
	fi
}

# Get version of installed TS3 server
# Par 1: ServerQueryIP:string or TS3ServerRootDirectory:string
# Par 2: ServerQueryPort:string
# Return: Version:string or 1:boolean
function getVersionOfInstalledTS3Server() {
	PAR_COUNTER=$(echo "$*" | wc -w)

	if [[ "$PAR_COUNTER" -eq 2 ]]; then
		(
			cat <<- VERSION
				spawn telnet "$1" "$2"
				expect "Welcome to the TeamSpeak 3 ServerQuery"
				send "version\r"
				expect "error id="
				send "quit\r"
			VERSION
		) | expect 2> /dev/null | grep -Eo "version=[0-9\.?]+" | cut -d "=" -f 2 > VERSION.txt

		VERSION="$(cat VERSION.txt)"

		rm VERSION.txt

		if [[ -n "$VERSION" ]]; then
			echo -n "$VERSION";
		else
			return 1;
		fi
	elif [[ "$PAR_COUNTER" -eq 1 ]]; then
		INSTANCE_LOG_FILE="$(find $(getTS3ServerInstanceLogPath ${1}) -name *_0.log | sort -nr | head -1)"
		VERSION="$(grep -Eo 'TeamSpeak\s3\sServer\s[0-9\.?]+' $INSTANCE_LOG_FILE | cut -d " " -f 4 | tail -1)"

		if [[ -n "$VERSION" ]]; then
			echo -n "$VERSION";
		else
			return 1;
		fi
	fi
}

# Get build of installed TS3 server
# Par 1: ServerQueryIP:string
# Par 2: ServerQueryPort:string
# Return: Build:string or 1:boolean
function getBuildOfInstalledTS3Server() {
	PAR_COUNTER=$(echo "$*" | wc -w)

	if [[ "$PAR_COUNTER" -eq 2 ]]; then
		(
			cat <<- VERSION
				spawn telnet "$1" "$2"
				expect "Welcome to the TeamSpeak 3 ServerQuery"
				send "version\r"
				expect "error id="
				send "quit\r"
			VERSION
		) | expect 2> /dev/null | grep -Eo "build=[0-9]+" | cut -d "=" -f 2 > BUILD.txt

		BUILD="$(cat BUILD.txt)"

		rm BUILD.txt

		if [[ -n "$BUILD" ]]; then
			echo -n "$BUILD";
		else
			return 1;
		fi
	elif [[ "$PAR_COUNTER" -eq 0 ]]; then
		echo -n "Unknown";
	fi
}

# Get platform of installed TS3 server
# Par 1: ServerQueryIP:string or TS3ServerRootDirectory:string
# Par 2: ServerQueryPort:string
# Return: Platform:string or 1:boolean
function getPlatformOfInstalledTS3Server() {
	PAR_COUNTER=$(echo "$*" | wc -w)

	if [[ "$PAR_COUNTER" -eq 2 ]]; then
		(
			cat <<- VERSION
				spawn telnet "$1" "$2"
				expect "Welcome to the TeamSpeak 3 ServerQuery"
				send "version\r"
				expect "error id="
				send "quit\r"
			VERSION
		) | expect 2> /dev/null | grep -Eo "platform=[a-zA-Z]+" | cut -d "=" -f 2 > PLATFORM.txt

		PLATFORM="$(cat PLATFORM.txt)"

		rm PLATFORM.txt

		if [[ -n "$PLATFORM" ]]; then
			echo -n "$PLATFORM";
		else
			return 1;
		fi
	elif [[ "$PAR_COUNTER" -eq 1 ]]; then
		INSTANCE_LOG_FILE="$(find $(getTS3ServerInstanceLogPath ${1}) -name *_0.log | sort -nr | head -1)"
		PLATFORM="$(grep -Eo '(Linux|FreeBSD)' $INSTANCE_LOG_FILE | tail -1)"

		if [[ -n "$PLATFORM" ]]; then
			echo -n "$PLATFORM";
		else
			return 1;
		fi
	fi
}

# Get architecture of installed TS3 server
# Par 1: TS3ServerRootDirectory:string
# Return: Architecture:string or 1:boolean
function getArchitectureOfInstalledTS3Server() {
	INSTANCE_LOG_FILE="$(find $(getTS3ServerInstanceLogPath ${1}) -name *_0.log | sort -nr | head -1)"
	SYSTEM_TYPE="$(grep -Eo 'Binary: (64bit|32bit)' $INSTANCE_LOG_FILE | cut -d " " -f 2 | tail -1)"

	if [[ "${SYSTEM_TYPE}" == "64bit" ]]; then
		ARCHITECTURE="amd64"
	else
		ARCHITECTURE="x86"
	fi

	if [[ -n "$ARCHITECTURE" ]]; then
		echo -n "$ARCHITECTURE";
	else
		return 1;
	fi
}

# Get owner of TS3 server files 
# Par 1: TS3ServerRootDirectory:string
# Return: Owner:string or 1:boolean
function getOwnerOfTS3ServerFiles() {
	OWNER="$(stat --format='%U' $(find ${1} -name 'ts3server_startscript.sh' 2> /dev/null | sort | tail -1))"

	if [[ -n "$OWNER" ]]; then
		echo -n "$OWNER";
	else
		return 1;
	fi
}

# Get ID of owner
# Par 1: TS3ServerRootDirectory:string
# Return: OwnerID:string or 1:boolean
function getOwnerID() {
	OWNER_ID=$(grep -E "^$(getOwnerOfTS3ServerFiles ${1})\:" /etc/passwd | cut -d ":" -f 3)

	if [[ -n "$OWNER_ID" ]]; then
		echo -n "$OWNER_ID";
	else
		return 1;
	fi
}

# Get group of TS3 server files
# Par 1: TS3ServerRootDirectory:string
# Return: Group:string or 1:boolean
function getGroupOfTS3ServerFiles() {
	GROUP="$(stat --format='%G' $(find ${1} -name 'ts3server_startscript.sh' 2> /dev/null | sort | tail -1))"

	if [[ -n "$GROUP" ]]; then
		echo -n "$GROUP";
	else
		return 1;
	fi
}

# Get ID of group
# Par 1: TS3ServerRootDirectory:string
# Return: GroupID:string or 1:boolean
function getGroupID() {
	GROUP_ID=$(grep -E "^$(getGroupOfTS3ServerFiles ${1})\:" /etc/group | cut -d ":" -f 3)

	if [[ -n "$GROUP_ID" ]]; then
		echo -n "$GROUP_ID";
	else
		return 1;
	fi
}

# Check, if shell of owner is valid (bash, sh, ksh,...)
# Par 1: Owner
# Return: 0:boolean or 1:boolean
function isShellOfOwnerValid() {
	SHELL="$(grep -E "^$1\:" /etc/passwd | cut -d ':' -f 7)"

	if [[ "$SHELL" == "/bin/false" ]] || [[ "$SHELL" == "/usr/sbin/nologin" ]]; then
		return 1;
	else
		return 0;
	fi
}

# Check, if files/ directory is on a external storage (NAS/SAN/iSCSI)
# Par 1: TeamSpeakRootDirectory:string
# Return: 0:boolean or 1:boolean
function isFilesStorageExternal() {
	STORAGE="$(df ${1}/files/ | tail -1 | cut -d ' ' -f 1)"

	if [[ "$STORAGE" != /* ]]; then
		return 1;
	else
		return 0;
	fi
}

# Does INI-File exists?
# Par 1: TS3ServerRootDirectory:string
# Return: 0:boolean or 1:boolean
function INIFileExists() {
	if [[ -f "${1}/ts3server.ini" ]]; then
		return 0;
	else
		return 1;
	fi
}

# Get database INI-File
# Par 1: TeamSpeakRootDirectory:string
# Return: DatabaseINIFile:string or 1:boolean
function getDatabaseINIFile() {
	if INIFileExists ${1}; then
		DATABASE_INI_FILE="$(grep -E '^dbpluginparameter=.+$' < ${1}/ts3server.ini | cut -d '=' -f 2)"

		if [[ -n "$DATABASE_INI_FILE" ]]; then
			echo -n "$DATABASE_INI_FILE";
		else
			return 1;
		fi
	else
		return 1;
	fi
}

# Get TS3 server instance log path
# Par 1: TS3ServerRootDirectory:string
# Return: InstanceLogPath:string or 1:boolean
function getTS3ServerInstanceLogPath() {
	INSTANCE_LOG_PATH=""

	if INIFileExists ${1}; then
		INSTANCE_LOG_PATH_TEMP="$(grep logpath < ${1}/ts3server.ini | cut -d '=' -f 2)"
	else
		INSTANCE_LOG_PATH_TEMP="$(findRealTS3RootDirectory ${1})logs/"
	fi

	# Absolute or relative path?
	if [[ "$INSTANCE_LOG_PATH_TEMP" = /* ]]; then
		INSTANCE_LOG_PATH="$INSTANCE_LOG_PATH_TEMP"
	else
		cd ${1}/$INSTANCE_LOG_PATH_TEMP
		INSTANCE_LOG_PATH="$(pwd)"
		cd - > /dev/null
	fi

	if [[ -n "$INSTANCE_LOG_PATH" ]]; then
		echo -n "$INSTANCE_LOG_PATH";
	else
		return 1;
	fi
}

# Get database type
# Par 1: TeamSpeakRootDirectory:string
# Return: DatabaseType:string or 1:boolean
function getDatabaseType() {
	INSTANCE_LOG_PATH="$(getTS3ServerInstanceLogPath ${1})"
	DATABASE_TYPE="$(grep -Eo 'dbPlugin name:.*plugin' $(find ${INSTANCE_LOG_PATH} -name 'ts3server*_0.log' 2> /dev/null | sort | tail -1) | tail -1 | tr -d " " | cut -d ":" -f 2 | grep -Eo 'SQLite|MySQL|MariaDB')"

	if [[ -n "$DATABASE_TYPE" ]]; then
		echo -n "$DATABASE_TYPE";
	else
		return 1;
	fi
}

# Get ServerQuery IP
# Par 1: TeamSpeakRootDirectory:string
# Return: ServerQueryIPs:string
function getServerQueryIP() {
	if INIFileExists ${1}; then
		SERVER_QUERY_IP="$(grep -E '^query_ip=' < ${1}/ts3server.ini | cut -d '=' -f 2 | cut -d ',' -f 1)"
	else
		# Detect database type (SQLite, MySQL or MariaDB)
		DATABASE_TYPE="$(getDatabaseType ${1})"

		if [[ "${DATABASE_TYPE}" == "SQLite" ]] && [[ $(checkdeps sqlite3) -eq 0 ]]; then
			SERVER_QUERY_IP="$(sqlite3 ${1}/ts3server.sqlitedb 'SELECT ip FROM bindings WHERE type=2;' | tail -1)"
		elif [[ "${DATABASE_TYPE}" == "MySQL" ]] || [[ "${DATABASE_TYPE}" == "MariaDB" ]]; then
			DATABASE_INI_FILE="$(getDatabaseINIFile ${1})"

			DB_USERNAME=$(grep -Ei '^username=.+$' ${1}${DATABASE_INI_FILE} | cut -d '=' -f 2 | sed -e "s/^'//" -e 's/^"//' -e "s/'$//" -e 's/"$//')
			DB_PASSWORD=$(grep -Ei '^password=.+$' ${1}${DATABASE_INI_FILE} | cut -d '=' -f 2 | sed -e "s/^'//" -e 's/^"//' -e "s/'$//" -e 's/"$//')
			DB_NAME=$(grep -Ei '^database=.+$' ${1}${DATABASE_INI_FILE} | cut -d '=' -f 2 | sed -e "s/^'//" -e 's/^"//' -e "s/'$//" -e 's/"$//')
			DB_HOST=$(grep -Ei '^host=.+$' ${1}${DATABASE_INI_FILE} | cut -d '=' -f 2 | sed -e "s/^'//" -e 's/^"//' -e "s/'$//" -e 's/"$//')
			DB_PORT=$(grep -Ei '^port=.+$' ${1}${DATABASE_INI_FILE} | cut -d '=' -f 2 | sed -e "s/^'//" -e 's/^"//' -e "s/'$//" -e 's/"$//')

			SERVER_QUERY_IP="$(echo 'SELECT ip FROM bindings WHERE type=2;' | mysql --user=${DB_USERNAME} --password=${DB_PASSWORD} ${DB_NAME} --host=${DB_HOST} --port=${DB_PORT} | tail -1)"
		fi
	fi

	if [[ -n "$SERVER_QUERY_IP" ]]; then
		if [[ "$SERVER_QUERY_IP" =~ 0\.0\.0\.0 ]]; then
			echo -n "127.0.0.1";
		else
			echo -n "$SERVER_QUERY_IP" | grep -Eo "([0-9]+[.]){3}[0-9]+";
		fi
	else
		echo -n "127.0.0.1";
	fi
}

# Get ServerQuery Port
# Par 1: TeamSpeakRootDirectory:string
# Return: ServerQueryPort:string
function getServerQueryPort() {
	if INIFileExists ${1}; then
		SERVER_QUERY_PORT="$(grep -E '^query_port=[0-9]{4,5}$' < ${1}/ts3server.ini | cut -d '=' -f 2)"

		if [[ -n "$SERVER_QUERY_PORT" ]]; then
			echo -n "$SERVER_QUERY_PORT" | grep -Eo "([0-9]+)";
		else
			echo -n "10011";
		fi
	else
		echo -n "10011";
	fi
}

# Get temporary backup directory
# Return: TemporaryBackupDirectory:string or 1:boolean
function getTempBackupDir() {
	TEMP_BACKUP_DIR="$(grep TEMP_BACKUP_DIR ${ABSOLUTE_PATH}/configs/config.all | cut -d '=' -f 2)"

	if [[ -n "$TEMP_BACKUP_DIR" ]]; then
		if [[ -d "$TEMP_BACKUP_DIR" ]]; then
			echo -n "$TEMP_BACKUP_DIR";
		else
			return 1;
		fi
	else
		echo "/tmp";
	fi
}

# Get persistent backup directory
# Return: PersistentBackupDirectory:string or 1:boolean
function getPersistentBackupDir() {
	PERSISTENT_BACKUP_DIR="$(grep PERSISTENT_BACKUP_DIR ${ABSOLUTE_PATH}/configs/config.all | cut -d '=' -f 2)"

	if [[ -n "$PERSISTENT_BACKUP_DIR" ]]; then
		if [[ -d "$PERSISTENT_BACKUP_DIR" ]]; then
			echo -n "$PERSISTENT_BACKUP_DIR";
		else
			return 1;
		fi
	else
		echo "/var/backups";
	fi
}

# Get ServerQuery displayed name (clear text)
# Return: ServerQueryDisplayedName:string or 1:boolean
function getServerQueryDisplayedName() {
	SERVER_QUERY_DISPLAYED_NAME="$(grep DISPLAYED_USERNAME ${ABSOLUTE_PATH}/configs/config.all | cut -d '=' -f 2)"

	if [[ -n "$SERVER_QUERY_DISPLAYED_NAME" ]]; then
		if [[ $(echo -n "$SERVER_QUERY_DISPLAYED_NAME" | wc -c) -lt 30 ]]; then
			echo -n "$SERVER_QUERY_DISPLAYED_NAME";
		else
			return 1;
		fi
	else
		return 1;
	fi
}

# Get ServerQuery displayed name (escaped)
# Return: ServerQueryDisplayedNameEscaped:string or 1:boolean
function getServerQueryDisplayedNameEscaped() {
	SERVER_QUERY_DISPLAYED_NAME="$(grep DISPLAYED_USERNAME ${ABSOLUTE_PATH}/configs/config.all | cut -d '=' -f 2)"

	if [[ -n "$SERVER_QUERY_DISPLAYED_NAME" ]]; then
		SERVER_QUERY_DISPLAYED_NAME_ESCAPED="$(echo ${SERVER_QUERY_DISPLAYED_NAME} | sed -r 's/ /\\\\s/g')"

		if [[ $(echo -n "$SERVER_QUERY_DISPLAYED_NAME_ESCAPED" | wc -c) -lt 30 ]]; then
			echo -n "$SERVER_QUERY_DISPLAYED_NAME_ESCAPED";
		else
			return 1;
		fi
	else
		return 1;
	fi
}

# Get administrator eMail
# Return: AdministratorEmail:string or 1:boolean
function getAdministratorEmail() {
	ADMINISTRATOR_EMAIL="$(grep ADMINISTRATOR_EMAILS ${ABSOLUTE_PATH}/configs/config.all | cut -d "=" -f 2)"

	if [[ -n "$ADMINISTRATOR_EMAIL" ]]; then
		echo -n "$ADMINISTRATOR_EMAIL";
	else
		return 1;
	fi
}

# Get manually poke message (clear text)
# Par 1: LatestServerVersion:string
# Return: PokeMessage:string or 1:boolean
function getManuallyPokeMessage() {
	POKE_MESSAGE="$(grep -E '^UPDATE_TEXT' ${ABSOLUTE_PATH}/configs/config.all | cut -d '=' -f 2)"

	if [[ -n "$POKE_MESSAGE" ]]; then
		POKE_MESSAGE="$(echo ${POKE_MESSAGE} | sed -e 's/\$VERSION/'${1}'/g')"

		if [[ $(echo -n "$POKE_MESSAGE" | wc -c) -lt 100 ]]; then
			echo -n "$POKE_MESSAGE";
		else
			return 1;
		fi
	else
		return 1;
	fi
}

# Get manually poke message (escaped)
# Par 1: LatestServerVersion:string
# Return: PokeMessageEscaped:string or 1:boolean
function getManuallyPokeMessageEscaped() {
	POKE_MESSAGE="$(grep -E '^UPDATE_TEXT' ${ABSOLUTE_PATH}/configs/config.all | cut -d '=' -f 2)"

	if [[ -n "$POKE_MESSAGE" ]]; then
		POKE_MESSAGE_ESCAPED="$(echo ${POKE_MESSAGE} | sed -r 's/ /\\\\s/g' | sed -e 's/\$VERSION/'${1}'/g')"

		if [[ $(echo -n "$POKE_MESSAGE_ESCAPED" | wc -c) -lt 100 ]]; then
			echo -n "$POKE_MESSAGE_ESCAPED";
		else
			return 1;
		fi
	else
		return 1;
	fi
}

# Get cronjob poke message (clear text)
# Par 1: LatestServerVersion:string
# Return: PokeMessage:string or 1:boolean
function getCronjobPokeMessage() {
	POKE_MESSAGE="$(grep -E '^CRON_UPDATE_TEXT' ${ABSOLUTE_PATH}/configs/config.all | cut -d '=' -f 2)"

	if [[ -n "$POKE_MESSAGE" ]]; then
		POKE_MESSAGE="$(echo ${POKE_MESSAGE} | sed -e 's/\$VERSION/'${1}'/g')"

		if [[ $(echo -n "$POKE_MESSAGE" | wc -c) -lt 100 ]]; then
			echo -n "$POKE_MESSAGE";
		else
			return 1;
		fi
	else
		return 1;
	fi
}

# Get cronjob poke message (escaped)
# Par 1: LatestServerVersion:string
# Return: PokeMessageEscaped:string or 1:boolean
function getCronjobPokeMessageEscaped() {
	POKE_MESSAGE="$(grep -E '^CRON_UPDATE_TEXT' ${ABSOLUTE_PATH}/configs/config.all | cut -d '=' -f 2)"

	if [[ -n "$POKE_MESSAGE" ]]; then
		POKE_MESSAGE_ESCAPED="$(echo ${POKE_MESSAGE} | sed -r 's/ /\\\\s/g' | sed -e 's/\$VERSION/'${1}'/g')"

		if [[ $(echo -n "$POKE_MESSAGE_ESCAPED" | wc -c) -lt 100 ]]; then
			echo -n "$POKE_MESSAGE_ESCAPED";
		else
			return 1;
		fi
	else
		return 1;
	fi
}

# Get ignore client list (comata)
# Return: IgnoreClientList:string or 1:boolean
function getIgnoreClientList {
	IGNORE_CLIENT_LIST="$(grep 'IGNORE_CLIENTS' ${ABSOLUTE_PATH}/configs/config.all | cut -d '=' -f 2 | sed ':a;N;$!ba;s/\n/, /g')"

	if [[ -n "$IGNORE_CLIENT_LIST" ]]; then
		echo -n "$IGNORE_CLIENT_LIST";
	else
		return 1;
	fi
}

# Get ignore server groups list (comata)
# Return: IgnoreServerGroupsList:string or 1:boolean
function getIgnoreServerGroupsList {
	IGNORE_SERVERGROUPS_LIST="$(grep 'IGNORE_SERVERGROUPS' ${ABSOLUTE_PATH}/configs/config.all | cut -d '=' -f 2 | sed ':a;N;$!ba;s/\n/, /g')"

	if [[ -n "$IGNORE_SERVERGROUPS_LIST" ]]; then
		echo -n "$IGNORE_SERVERGROUPS_LIST";
	else
		return 1;
	fi
}

# Get list of virtual server
# Par 1: ServerQueryIP:string
# Par 2: ServerQueryPort:string
# Return: 0:boolean or 1:boolean
# Save Format: SID (One line per virtualserver_id)
function getListOfVirtualServer() {
	SERVERADMIN_PASSWORD="$(cat ${INSTANCE_PATH}/.password-file)"

	(
		cat <<- SERVERLIST
			spawn telnet "$1" "$2"
			expect "Welcome to the TeamSpeak 3 ServerQuery"
			send "login serveradmin ${SERVERADMIN_PASSWORD}\r"
			expect "error id=0 msg=ok"
			send "serverlist\r"
			expect "error id=0 msg=ok"
			send "logout\r"
		SERVERLIST
	) | expect 2> /dev/null | grep -E "virtualserver_id=" | tr "|" "\n" | grep -Ev "virtualserver_status=offline" | grep -Eo "virtualserver_id=[0-9]+" | grep -Eo "[0-9]+" > SERVERLIST.txt

	if [[ -s SERVERLIST.txt ]]; then
		return 0;
	else
		return 1;
	fi
}

# Get list of online clients for each virtual server
# Par 1: ServerQueryIP:string
# Par 2: ServerQueryPort:string
# Return: 0:boolean or 1:boolean
# Save Format: sid=21|clid=1|clid=4|clid=5| (One line per server)
function getListOfOnlineClients() {
	if getListOfVirtualServer ${1} ${2}; then
		SERVERADMIN_PASSWORD="$(cat ${INSTANCE_PATH}/.password-file)"

		(
			cat <<- LOGIN
				spawn telnet "$1" "$2"
				expect "Welcome to the TeamSpeak 3 ServerQuery"
				send "login serveradmin ${SERVERADMIN_PASSWORD}\r"
				expect "error id=0 msg=ok"
			LOGIN

			while read sid; do
				cat <<- CLIENTLIST
					send "use sid=${sid}\r"
					expect "error id=0 msg=ok"
					send "clientlist\r"
					expect "error id=0 msg=ok"
				CLIENTLIST
			done < SERVERLIST.txt

			cat <<- LOGOUT
				expect "error id=0 msg=ok"
				send "logout\r"
			LOGOUT
		) | expect 2> /dev/null | grep -E "use sid|clid=" | tr "|" "\n" | sed 's/use/\nuse/g' | cut -d " " -f 1-3,5 | grep -Eo "sid=[0-9]+|clid=[0-9]+.*client_type=[0123]" | tr "\n" "|" | sed 's/sid/\nsid/g' > CLIENTLIST.txt

		if [[ -s CLIENTLIST.txt ]]; then
			return 0;
		else
			return 1;
		fi
	else
		return 1;
	fi
}

# Get list of client database id, which should be ignored
# Par 1: ServerQueryIP:string
# Par 2: ServerQueryPort:string
# Return: 0:boolean or 1:boolean
# Save Format: cldbid=1 (One cldbid per line)
function getListOfClientsWhichShouldBeIgnored() {
	if getListOfVirtualServer ${1} ${2}; then
		SERVERADMIN_PASSWORD="$(cat ${INSTANCE_PATH}/.password-file)"

		(
			cat <<- LOGIN
				spawn telnet "$1" "$2"
				expect "Welcome to the TeamSpeak 3 ServerQuery"
				send "login serveradmin ${SERVERADMIN_PASSWORD}\r"
			LOGIN

			while read sid; do
				cat <<- USE
					expect "error id=0 msg=ok"
					send "use sid=${sid}\r"
				USE

				grep 'IGNORE_SERVERGROUPS' ${ABSOLUTE_PATH}/configs/config.all | cut -d '=' -f 2 | tr ',' '\n' | while read sgid; do
					cat <<- SERVERGROUPCLIENTLIST
						expect "error id=0 msg=ok"
						send "servergroupclientlist sgid=${sgid}\r"
					SERVERGROUPCLIENTLIST
				done
			done < SERVERLIST.txt

			cat <<- LOGOUT
				expect "error id=0 msg=ok"
				send "logout\r"
			LOGOUT
		) | expect 2> /dev/null | grep -E "cldbid" | tr "|" "\n" > IGNORE_CLIENTLIST.txt

		if [[ -s IGNORE_CLIENTLIST.txt ]]; then
			return 0;
		else
			return 1;
		fi
	else
		return 1;
	fi
}

# Get list of allowed clients to poke
# Par 1: ServerQueryIP:string
# Par 2: ServerQueryPort:string
# Return: ListOfAllowedClientsToPoke:string
# Save Format: SID=21|CLID|CLID|CLID[...]
function getListOfAllowedClientsToPoke() {
	if getListOfOnlineClients $1 $2 && getListOfClientsWhichShouldBeIgnored $1 $2; then
		# Make sure that no unsorted pokelist exist
		if [[ -f POKELIST_UNSORTED.txt ]]; then
			rm POKELIST_UNSORTED.txt
		fi

		cat CLIENTLIST.txt | tr "|" "\n" | while read clientlist; do
			SID=$(echo "$clientlist" | grep -Eo 'sid=[0-9]+' | grep -Eo '[0-9]+')

			if [[ -n "$SID" ]]; then
				echo -n "SID=${SID}|" >> POKELIST_UNSORTED.txt
			fi

			if [[ ! $(grep -Fxq "$clientlist" IGNORE_CLIENTLIST.txt) ]] && [[ ! $(echo "$clientlist" | grep -Eo 'client_type=1') ]]; then
				CLID=$(echo "$clientlist" | grep -Eo 'clid=[0-9]+' | grep -Eo '[0-9]+')

				if [[ -n "$CLID" ]]; then
					echo -n "$CLID|" >> POKELIST_UNSORTED.txt
				fi
			fi
		done

		cat POKELIST_UNSORTED.txt | sed 's/SID/\nSID/g' > POKELIST.txt

		if [[ -s POKELIST.txt ]]; then
			return 0;
		else
			return 1;
		fi
	else
		return 1;
	fi
}


# Poke all allowed clients
# Par 1: ServerQueryIP:string
# Par 2: ServerQueryPort:string
# Par 3: PokeMessage:string
# Return: 0:boolean or 1:boolean
function pokeAllowedClients() {
	if getListOfAllowedClientsToPoke ${1} ${2}; then
		POKE_MESSAGE="${3}"
		SERVER_QUERY_DISPLAYED_NAME="$(getServerQueryDisplayedNameEscaped)"
		SERVERADMIN_PASSWORD="$(cat ${INSTANCE_PATH}/.password-file)"

		if [[ -n "$SERVER_QUERY_DISPLAYED_NAME" ]] && [[ -n "$SERVERADMIN_PASSWORD" ]]; then
			# Time measurement poke clients realtime START
			TIME_MEASUREMENT_POKE_CLIENTS_REALTIME_START=$(date +%s)

			(
				cat <<- LOGIN
					spawn telnet "$1" "$2"
					expect "Welcome to the TeamSpeak 3 ServerQuery"
					send "login serveradmin ${SERVERADMIN_PASSWORD}\r"
				LOGIN

				while read sid; do
					cat <<- USE
						expect "error id=0 msg=ok"
						send "use sid=${sid}\r"
						expect "error id=0 msg=ok"
						send "clientupdate client_nickname=${SERVER_QUERY_DISPLAYED_NAME}\r"
					USE

					grep -E "SID=${sid}" POKELIST.txt | tr "|" "\n" | grep -v "SID=${sid}" | while read clid; do
						if [[ -n "$clid" ]]; then
							cat <<- POKE
								expect "error id=0 msg=ok"
								send "clientpoke msg=${POKE_MESSAGE} clid=${clid}\r"
							POKE
						fi
					done
				done < SERVERLIST.txt

				cat <<- LOGOUT
					expect "error id=0 msg=ok"
					send "logout\r"
					expect "error id=0 msg=ok"
					send "quit\r"
				LOGOUT
			) | expect | grep "error id" | tail -2 | head -1 | grep -Eo "id=[0-9]+" | grep -Eo "[0-9]+" > POKE_RESULT.txt

			# Time measurement poke clients realtime END
			TIME_MEASUREMENT_POKE_CLIENTS_REALTIME_END=$(date +%s)

			RESULT="$(cat POKE_RESULT.txt)"

			rm POKE_RESULT.txt

			if [[ "$RESULT" == "0" ]]; then
				return 0;
			else
				return 1;
			fi
		else
			return 1;
		fi
	else
		return 1;
	fi
}

# Get list of temporary server passwords
# Par 1: ServerQueryIP:string
# Par 2: ServerQueryPort:string
# Return: 0:boolean or 1:boolean
# Save Format: SID=SID|TCID|TSPW|TCPW|DURATION|DESC (One line per temporary server password)
function getTemporaryServerPasswords() {
	SERVERADMIN_PASSWORD="$(cat ${INSTANCE_PATH}/.password-file)"

	if getListOfVirtualServer ${1} ${2}; then
		# Time measurement backuping temporary server passwords START
		TIME_MEASUREMENT_GET_TEMPORARY_SERVER_PASSWORDS_START=$(date +%s)
		(
			cat <<- LOGIN
				spawn telnet "$1" "$2"
				expect "Welcome to the TeamSpeak 3 ServerQuery"
				send "login serveradmin ${SERVERADMIN_PASSWORD}\r"
			LOGIN

			while read sid; do
				cat <<- USE
					expect "error id=0 msg=ok"
					send "use sid=${sid}\r"
					expect "error id=0 msg=ok"
					send "clientupdate client_nickname=${SERVER_QUERY_DISPLAYED_NAME}\r"
				USE

				cat <<- SERVERTEMPPASSWORDLIST
					expect "error id=0 msg=ok"
					send "servertemppasswordlist\r"
				SERVERTEMPPASSWORDLIST
			done < SERVERLIST.txt

			cat <<- LOGOUT
				expect "error id=0 msg=ok"
				send "logout\r"
				expect "error id=0 msg=ok"
				send "quit\r"
			LOGOUT
		) | expect | grep -E "use sid|nickname=" | grep -v "clientupdate" | tr "|" "\n" > TEMP_SERVERTEMPPASSWORDLIST.txt

		# Time measurement backuping temporary server passwords END
		TIME_MEASUREMENT_GET_TEMPORARY_SERVER_PASSWORDS_END=$(date +%s)
	else
		return 1;
	fi

	# Time measurement formatting temporary server passwords START
	TIME_MEASUREMENT_FORMAT_TEMPORARY_SERVER_PASSWORDS_START=$(date +%s)
	cat TEMP_SERVERTEMPPASSWORDLIST.txt | tr -d '^M' | while read -r temppass_line; do
		SID=$(echo ${temppass_line} | grep -Eo 'sid=[0-9]+' | cut -d '=' -f 2)
		TCID=$(echo ${temppass_line} | grep -Eo 'tcid=[0-9]+' | cut -d '=' -f 2)
		TSPW="$(echo ${temppass_line} | grep -Eo 'pw_clear=[^ ]*' | cut -d '=' -f 2)"
		TCPW="$(echo ${temppass_line} | grep -Eo 'tcpw=?[^ ]*' | cut -d '=' -f 2)"
		START_DATE=$(date +%s)
		END_DATE=$(echo ${temppass_line} | grep -Eo 'end=[0-9]+' | cut -d '=' -f 2)
		DURATION=$((END_DATE-START_DATE))
		DESC="$(echo ${temppass_line} | grep -Eo 'desc=?[^ ]*' | cut -d '=' -f 2)"

		if [[ "${TCPW}" =~ ^tcpw.*$ ]]; then
			TCPW=""
		fi

		if [[ "${DESC}" =~ ^desc.*$ ]]; then
			DESC=""
		fi

		if [[ "${SID}" != "" ]]; then
			SERVER_ID=${SID}
		else
			echo "SID=${SERVER_ID}|${TCID}|${TSPW}|${TCPW}|${DURATION}|${DESC}" >> SERVERTEMPPASSWORDLIST.txt;
		fi
	done
	# Time measurement formatting temporary server passwords END
	TIME_MEASUREMENT_FORMAT_TEMPORARY_SERVER_PASSWORDS_END=$(date +%s)

	rm TEMP_SERVERTEMPPASSWORDLIST.txt

	if [[ -s SERVERTEMPPASSWORDLIST.txt ]]; then
		return 0;
	else
		return 1;
	fi
}

# Set temporary server passwords
# Par 1: ServerQueryIP:string
# Par 2: ServerQueryPort:string
# Par 3: TeamSpeakRootDirectory:string
# Return: 0:boolean or 1:boolean
function setTemporaryServerPasswords() {
	SERVERADMIN_PASSWORD="$(cat ${INSTANCE_PATH}/.password-file)"
	SERVER_QUERY_DISPLAYED_NAME="$(getServerQueryDisplayedNameEscaped)"
	INSTANCE_LOG_FILE="$(find $(getTS3ServerInstanceLogPath ${3}) -name *_0.log | sort -nr | head -1)"

	SERVERQUERY_UI_READY=0;
	while [[ "${SERVERQUERY_UI_READY}" -eq 0 ]]; do
		SERVERQUERY_UI_READY=$(grep -Eic "Query.*listening[[:space:]]+on" ${INSTANCE_LOG_FILE})
	done

	(
		cat <<- LOGIN
			spawn telnet "$1" "$2"
			expect "Welcome to the TeamSpeak 3 ServerQuery"
			send "login serveradmin ${SERVERADMIN_PASSWORD}\r"
		LOGIN

		while read sid; do
			cat <<- USE
				expect "error id=0 msg=ok"
				send "use sid=${sid}\r"
				expect "error id=0 msg=ok"
				send "clientupdate client_nickname=${SERVER_QUERY_DISPLAYED_NAME}\r"
			USE

			grep -E "SID=${sid}" SERVERTEMPPASSWORDLIST.txt | while read -r temppass_entry; do
				TCID=$(echo ${temppass_entry} | cut -d '|' -f 2)
				TSPW="$(echo ${temppass_entry} | cut -d '|' -f 3)"
				TCPW="$(echo ${temppass_entry} | cut -d '|' -f 4)"
				DURATION="$(echo ${temppass_entry} | cut -d '|' -f 5)"
				DESC="$(echo ${temppass_entry} | cut -d '|' -f 6)"

				if [[ "${DESC}" == "" ]]; then
					DESC="none"
				fi

				if [[ "${TCPW}" != "" ]]; then
					cat <<- SERVERTEMPPASSWORDADD
						expect "error id=0 msg=ok"
						send {servertemppasswordadd pw=${TSPW} desc=${DESC} duration=${DURATION} tcid=${TCID} tcpw=${TCPW}}
						expect "servertemppasswordadd pw="
						send "\r"
					SERVERTEMPPASSWORDADD
				else
					cat <<- SERVERTEMPPASSWORDADD
						expect "error id=0 msg=ok"
						send {servertemppasswordadd pw=${TSPW} desc=${DESC} duration=${DURATION} tcid=${TCID}}
						expect "servertemppasswordadd pw="
						send "\r"
					SERVERTEMPPASSWORDADD
				fi
			done
		done < SERVERLIST.txt

		cat <<- LOGOUT
			expect "error id=0 msg=ok"
			send "logout\r"
			expect "error id=0 msg=ok"
			send "quit\r"
		LOGOUT
	) | expect | grep -E "^error id=" | grep -v "error id=0 msg=ok" > SERVERTEMPPASSWORDADD.txt

	if [[ ! -s SERVERTEMPPASSWORDADD.txt ]]; then
		return 0;
	else
		return 1;
	fi
}

# Start, Status, Stop TS3 server instance
# Par 1: TeamSpeakRootDirectory:string
# Par 2: Action:string
# Return: 0:boolean or 1:boolean
function ts3server() {
	case $2 in
		start)
			RESULT=$(su -s "$(which bash)" -c "cd $1 && ./ts3server_startscript.sh start 2> /dev/null && cd - > /dev/null" - $(getOwnerOfTS3ServerFiles $1))

			if [[ "$RESULT" =~ 'TeamSpeak 3 server started, for details please view the log file' ]]; then
				return 0;
			else
				return 1;
			fi
		;;

		status)
			RESULT=$(su -s "$(which bash)" -c "cd $1 && ./ts3server_startscript.sh status && cd - > /dev/null" - $(getOwnerOfTS3ServerFiles $1))

			if [[ "$RESULT" =~ 'Server is running' ]]; then
				return 0;
			else
				return 1;
			fi
		;;

		stop)
			RESULT=$(su -s "$(which bash)" -c "cd $1 && ./ts3server_startscript.sh stop && cd - > /dev/null" - $(getOwnerOfTS3ServerFiles $1))

			if [[ "$RESULT" =~ 'Stopping the TeamSpeak 3 server\.+done' ]]; then
				return 0;
			else
				return 1;
			fi
		;;

		*)
			return 1;
		;;
	esac
}

# Start, Status, Stop, Update TSDNS
# Par 1: TeamSpeakRootDirectory:string
# Par 2: Action:string
# Return: 0:boolean or 1:boolean
function tsdns() {
	DIRECTORY="${1}"

	while read instanceInfo; do
		INSTANCE_PATH=$(echo "$instanceInfo" | grep -Ev "^#" | cut -d "|" -f 2)
		INSTALLED_TS3_SERVER_PLATFORM=$(echo "$instanceInfo" | grep -Ev "^#" | cut -d "|" -f 5)
		TS3SERVER_ARCHITECTURE=$(echo "$instanceInfo" | grep -Ev "^#" | cut -d "|" -f 7)

		if [ -n "$INSTANCE_PATH" ]; then
			if [ "$INSTANCE_PATH" == "$DIRECTORY" ]; then
				break;
			fi
		fi
	done < TS3InstanceInfos.txt

	TSDNS_BINARY="tsdnsserver"
	LATEST_TSDNS_BINARY="tsdnsserver"

	if [ $(ps opid= -C ${TSDNS_BINARY}) ]; then
		TSDNS_PID=$(ps opid= -C ${TSDNS_BINARY} | tr -d '[:space:]')

		if [[ -n "$TSDNS_PID" ]]; then
			TSDNS_PATH="$(pwdx ${TSDNS_PID} | cut -d " " -f 2 | tr -d '[:space:]')"
		fi
	fi

	case $2 in
		start)
			if [ -f "${DIRECTORY}/tsdns/tsdns_settings.ini" ]; then
				cd ${DIRECTORY}/tsdns/
				su -s "$(which bash)" -c "./${LATEST_TSDNS_BINARY} &" $(getOwnerOfTS3ServerFiles $1)
				cd - > /dev/null

				return 0;
			else
				return 1;
			fi
		;;

		status)
			if [[ -n "$TSDNS_PID" ]]; then
				if [[ "$TSDNS_PATH" == "$1/tsdns" ]]; then
					return 0;
				else
					return 1;
				fi
			else
				return 1;
			fi
		;;

		stop)
			if [[ -n "$TSDNS_PID" ]]; then
				if [[ "$TSDNS_PATH" == "$1/tsdns" ]]; then
					if [ ! $(kill -9 ${TSDNS_PID}) ]; then
						return 0;
					else
						return 1;
					fi
				else
					return 1;
				fi
			else
				return 1;
			fi
		;;

		update)
			if [ -f "${DIRECTORY}/tsdns/tsdns_settings.ini" ]; then
				cd ${DIRECTORY}/tsdns/
				su -s "$(which bash)" -c "./${LATEST_TSDNS_BINARY} --update" $(getOwnerOfTS3ServerFiles $1)
				cd - > /dev/null

				return 0;
			else
				return 1;
			fi
		;;
	esac
}

# Export, Import MySQL/MariaDB database
# Par 1: Action:string (possible values: export, import)
# Par 2: TeamSpeakRootDirectory:string
# Return: 0:boolean or 1:boolean
function databaseBackup() {
	TEAMSPEAK_ROOT_DIRECTORY="${2}"
	DIRECTORY_MD5SUM=$(echo -n "${TEAMSPEAK_ROOT_DIRECTORY}" | md5sum | cut -d " " -f 1)
	DATABASE_INI_FILE="$(getDatabaseINIFile ${2})"

	DB_USERNAME=$(grep -Ei '^username=.+$' ${TEAMSPEAK_ROOT_DIRECTORY}${DATABASE_INI_FILE} | cut -d '=' -f 2 | sed -e "s/^'//" -e 's/^"//' -e "s/'$//" -e 's/"$//')
	DB_PASSWORD=$(grep -Ei '^password=.+$' ${TEAMSPEAK_ROOT_DIRECTORY}${DATABASE_INI_FILE} | cut -d '=' -f 2 | sed -e "s/^'//" -e 's/^"//' -e "s/'$//" -e 's/"$//')
	DB_NAME=$(grep -Ei '^database=.+$' ${TEAMSPEAK_ROOT_DIRECTORY}${DATABASE_INI_FILE} | cut -d '=' -f 2 | sed -e "s/^'//" -e 's/^"//' -e "s/'$//" -e 's/"$//')
	DB_HOST=$(grep -Ei '^host=.+$' ${TEAMSPEAK_ROOT_DIRECTORY}${DATABASE_INI_FILE} | cut -d '=' -f 2 | sed -e "s/^'//" -e 's/^"//' -e "s/'$//" -e 's/"$//')
	DB_PORT=$(grep -Ei '^port=.+$' ${TEAMSPEAK_ROOT_DIRECTORY}${DATABASE_INI_FILE} | cut -d '=' -f 2 | sed -e "s/^'//" -e 's/^"//' -e "s/'$//" -e 's/"$//')

	TEMP_BACKUP_DIR=$(getTempBackupDir)
	PERSISTENT_BACKUP_DIR=$(getPersistentBackupDir)

	if [[ "${1}" == "export" ]]; then
		mysqldump --add-drop-table --user=${DB_USERNAME} --password=${DB_PASSWORD} ${DB_NAME} --host=${DB_HOST} --port=${DB_PORT} > ${TEMP_BACKUP_DIR}/TS3Tools/TS3UpdateScript/${DIRECTORY_MD5SUM}/ts3DatabaseBackup.sql
		if [ $? -eq 0 ]; then
			mysqldump --add-drop-table --user=${DB_USERNAME} --password=${DB_PASSWORD} ${DB_NAME} --host=${DB_HOST} --port=${DB_PORT} > ${PERSISTENT_BACKUP_DIR}/TS3Tools/TS3UpdateScript/${DIRECTORY_MD5SUM}/ts3DatabaseBackup.sql
			if [ $? -eq 0 ]; then
				return 0;
			else
				return 1
			fi
		else
			return 1;
		fi
	elif [[ "${1}" == "import" ]]; then
		mysql --user=${DB_USERNAME} --password=${DB_PASSWORD} ${DB_NAME} --host=${DB_HOST} --port=${DB_PORT} < ${TEMP_BACKUP_DIR}/TS3Tools/TS3UpdateScript/${DIRECTORY_MD5SUM}/ts3DatabaseBackup.sql
		if [ $? -eq 0 ]; then
			return 0;
		else
			return 1;
		fi
	else
		return 1;
	fi
}

# Create, Delete, Deploy, Exists Backup
# Par 1: TeamSpeakRootDirectory:string
# Par 2: Action:string
# Par 3: sqlType:string (required for create|deploy)
# Return: 0:boolean or 1:boolean
function backup() {
	TEAMSPEAK_ROOT_DIRECTORY=$(findRealTS3RootDirectory ${1})
	DIRECTORY_MD5SUM=$(echo -n "${TEAMSPEAK_ROOT_DIRECTORY}" | md5sum | cut -d " " -f 1)

	DATABASE_TYPE=${3}

	TEMP_BACKUP_DIR=$(getTempBackupDir)
	PERSISTENT_BACKUP_DIR=$(getPersistentBackupDir)

	case $2 in
		create)
			if [ ! -d ${TEMP_BACKUP_DIR}/TS3Tools/TS3UpdateScript/${DIRECTORY_MD5SUM} ]; then
				mkdir -p ${TEMP_BACKUP_DIR}/TS3Tools/TS3UpdateScript/${DIRECTORY_MD5SUM}
			fi

			if [ ! -d ${PERSISTENT_BACKUP_DIR}/TS3Tools/TS3UpdateScript/${DIRECTORY_MD5SUM} ]; then
				mkdir -p ${PERSISTENT_BACKUP_DIR}/TS3Tools/TS3UpdateScript/${DIRECTORY_MD5SUM}
			fi

			if [ ! $(rsync -a --no-inc-recursive --exclude 'files' ${TEAMSPEAK_ROOT_DIRECTORY} ${TEMP_BACKUP_DIR}/TS3Tools/TS3UpdateScript/${DIRECTORY_MD5SUM} 2> /dev/null) ]; then
				if [ ! $(rsync -a --no-inc-recursive --exclude 'files' ${TEAMSPEAK_ROOT_DIRECTORY} ${PERSISTENT_BACKUP_DIR}/TS3Tools/TS3UpdateScript/${DIRECTORY_MD5SUM} 2> /dev/null) ]; then
					if [[ "${DATABASE_TYPE}" == "MySQL" ]] || [[ "${DATABASE_TYPE}" == "MariaDB" ]]; then
						if databaseBackup export ${TEAMSPEAK_ROOT_DIRECTORY}; then
							return 0;
						else
							return 1;
						fi
					else
						return 0;
					fi
				fi
			else
				return 1;
			fi
		;;

		delete)
			if [ ! $(rm -rf ${TEMP_BACKUP_DIR}/TS3Tools/TS3UpdateScript/${DIRECTORY_MD5SUM}) ]; then
				return 0;
			else
				return 1;
			fi
		;;

		deploy)
			if [ ! $(rsync -a --exclude 'ts3DatabaseBackup.sql' ${TEMP_BACKUP_DIR}/TS3Tools/TS3UpdateScript/${DIRECTORY_MD5SUM}/ ${TEAMSPEAK_ROOT_DIRECTORY} 2> /dev/null) ]; then
				if [[ "${DATABASE_TYPE}" == "MySQL" ]] || [[ "${DATABASE_TYPE}" == "MariaDB" ]]; then
					if databaseBackup import ${TEAMSPEAK_ROOT_DIRECTORY}; then
						return 0;
					else
						return 1;
					fi
				else
					return 0;
				fi
			else
				return 1;
			fi
		;;

		exists)
			if [ -d ${TEMP_BACKUP_DIR}/TS3Tools/TS3UpdateScript/${DIRECTORY_MD5SUM} ]; then
				return 0;
			else
				return 1;
			fi
		;;

		*)
			return 1;
		;;
	esac
}

# Updates TeamSpeak 3 server instance
# Par 1: TeamSpeakRootDirectory:string
# Par 2: LatestTS3ServerVersion:string
# Return: 0:boolean or 1:boolean
function updateTeamSpeakInstance() {
	UPDATE_STATUS_FLAG=0;
	TS3_INSTANCE_ROOT_DIRECTORY=$(findRealTS3RootDirectory ${1} | sed 's/\/$//')
	
	if [ -n "${TS3_INSTANCE_ROOT_DIRECTORY}" ] && [ -d "${TS3_INSTANCE_ROOT_DIRECTORY}" ]; then
		LATEST_RELEASE="${2}"
		RELEASE_NUMBER="$(echo $LATEST_RELEASE | grep -Eo '^[0-9\.?]+')"
		TS3_INSTANCE_ROOT_DIRECTORY_MD5SUM=$(echo -n "${TS3_INSTANCE_ROOT_DIRECTORY}" | md5sum | cut -d " " -f 1)

		INSTANCE_INFO_LINE=$(grep "${TS3_INSTANCE_ROOT_DIRECTORY}" TS3InstanceInfos.txt)
		STATUS_FLAG=$(echo "${INSTANCE_INFO_LINE}" | cut -d "|" -f 1)
		INSTANCE_PATH=$(echo "${INSTANCE_INFO_LINE}" | cut -d "|" -f 2)
		INSTALLED_TS3_SERVER_VERSION=$(echo "${INSTANCE_INFO_LINE}" | cut -d "|" -f 3)
		INSTALLED_TS3_SERVER_BUILD=$(echo "${INSTANCE_INFO_LINE}" | cut -d "|" -f 4)
		INSTALLED_TS3_SERVER_PLATFORM=$(echo "${INSTANCE_INFO_LINE}" | cut -d "|" -f 5 | tr '[:upper:]' '[:lower:]')
		TS3SERVER_INSTANCE_LOG_PATH=$(echo "${INSTANCE_INFO_LINE}" | cut -d "|" -f 6)
		TS3SERVER_ARCHITECTURE=$(echo "${INSTANCE_INFO_LINE}" | cut -d "|" -f 7)
		OWNER=$(echo "${INSTANCE_INFO_LINE}" | cut -d "|" -f 8)
		OWNER_ID=$(echo "${INSTANCE_INFO_LINE}" | cut -d "|" -f 9)
		GROUP=$(echo "${INSTANCE_INFO_LINE}" | cut -d "|" -f 10)
		GROUP_ID=$(echo "${INSTANCE_INFO_LINE}" | cut -d "|" -f 11)
		SERVERQUERY_IP=$(echo "${INSTANCE_INFO_LINE}" | cut -d "|" -f 12)
		SERVERQUERY_PORT=$(echo "${INSTANCE_INFO_LINE}" | cut -d "|" -f 13)
		DATABASE_TYPE=$(echo "${INSTANCE_INFO_LINE}" | cut -d "|" -f 14)

		cd ${INSTANCE_PATH}

		if [[ "$PAR_BETA_RELEASE" -eq 1 ]]; then
			TS3_SERVER_DOWNLOAD_LINK="https://files.teamspeak-services.com/pre_releases/server/${LATEST_RELEASE}/teamspeak3-server_${INSTALLED_TS3_SERVER_PLATFORM}_${TS3SERVER_ARCHITECTURE}-${LATEST_RELEASE}.tar.bz2"
		else
			TS3_SERVER_DOWNLOAD_MIRROR_LINKS=$(getDownloadMirrorLink ${INSTALLED_TS3_SERVER_PLATFORM} ${TS3SERVER_ARCHITECTURE} ${LATEST_RELEASE})

			IFS='|' read -r -a MIRROR_LINK_ARRAY <<< "$TS3_SERVER_DOWNLOAD_MIRROR_LINKS"
			for MIRROR_LINK in "${MIRROR_LINK_ARRAY[@]}"; do
				wget -t 1 -T 3 --spider -q ${MIRROR_LINK}
				if [[ $? == 0 ]]; then
					TS3_SERVER_DOWNLOAD_LINK="${MIRROR_LINK}"
					continue;
				fi
			done
		fi

		wget ${TS3_SERVER_DOWNLOAD_LINK} -q -O teamspeak3-server.tar.bz2

		if [[ ! -f "teamspeak3-server.tar.bz2" ]]; then
			return 1;
		fi

		if [[ -f ${INSTANCE_PATH}/tsdns/tsdnsserver_${INSTALLED_TS3_SERVER_PLATFORM}_${TS3SERVER_ARCHITECTURE} ]]; then
			rm -rf ${INSTANCE_PATH}/tsdns/tsdnsserver_${INSTALLED_TS3_SERVER_PLATFORM}_${TS3SERVER_ARCHITECTURE}
		fi

		if [[ -f ${INSTANCE_PATH}/ts3server_${INSTALLED_TS3_SERVER_PLATFORM}_${TS3SERVER_ARCHITECTURE} ]]; then
			rm -rf ${INSTANCE_PATH}/ts3server_${INSTALLED_TS3_SERVER_PLATFORM}_${TS3SERVER_ARCHITECTURE}
		fi
		
		bzip2 -d teamspeak3-server.tar.bz2 && tar xopf teamspeak3-server.tar
		if [[ $? -ne 0 ]]; then
			UPDATE_STATUS_FLAG=1;
		fi
		cp -R teamspeak3-server_${INSTALLED_TS3_SERVER_PLATFORM}_${TS3SERVER_ARCHITECTURE}/* .
		if [[ $? -ne 0 ]]; then
			UPDATE_STATUS_FLAG=1;
		fi
		rm -rf teamspeak3-server_${INSTALLED_TS3_SERVER_PLATFORM}_${TS3SERVER_ARCHITECTURE}/
		rm teamspeak3-server.tar
		
		# If database MySQL was used, update database to MariaDB
		# Installed Build 1388593719 is latest version 3.0.10.3 with MySQL support
		if [[ "$DATABASE_TYPE" == "MySQL" ]] && [[ "$INSTALLED_BUILD" -le 1388593719 ]]; then
			if [ $(mysql --user=${DB_USER_NAME} --password=${DB_PASSWORD} ${DB_NAME} < ${INSTANCE_PATH}/sql/updates_and_fixes/convert_mysql_to_mariadb.sql) ] && [ $(mysql --user=${DB_USER_NAME} --password=${DB_PASSWORD} ${DB_NAME} < ${INSTANCE_PATH}/sql/updates_and_fixes/mariadb_fix_latin_utf8.sql) ]; then
				UPDATE_STATUS_FLAG=1;
			fi
		fi
		
		# Add commandline parameter 'inifile=ts3server.ini' to ts3server_startscript.sh, if it was present before or will be required
		if [[ "$TEAMSPEAK_DATABASE_TYPE" == "MySQL" ]] || [[ "$TEAMSPEAK_DATABASE_TYPE" == "MariaDB" ]] || [ -f ${INSTANCE_PATH}/ts3server.ini ]; then
			IFS=''
			while read line; do
				if [[ "$line" =~ 'COMMANDLINE_PARAMETERS=' ]]; then
					echo 'COMMANDLINE_PARAMETERS="${2} inifile=ts3server.ini" #add any command line parameters you want to pass here' >> ${INSTANCE_PATH}/TEMP_ts3server_startscript.sh;
				else
					echo $line >> ${INSTANCE_PATH}/TEMP_ts3server_startscript.sh;
				fi
			done < ${INSTANCE_PATH}/ts3server_startscript.sh

			if [ ! $(rm -f ${INSTANCE_PATH}/ts3server_startscript.sh) ] && [ $(mv ${INSTANCE_PATH}/TEMP_ts3server_startscript.sh ${INSTANCE_PATH}/ts3server_startscript.sh) ]; then
				UPDATE_STATUS_FLAG=1;
			fi
		fi

		# The new file transfer routines on unix systems now depend on async io (aio*) routines
		# For FreeBSD this probably means you need to load the aio kernel module
		if [[ "$INSTALLED_TS3_SERVER_PLATFORM" == "FreeBSD" ]]; then
			if [ ! $(kldload aio) ]; then
				UPDATE_STATUS_FLAG=1;
			fi
		fi
		
		# Make sure, that ts3server binary is executable
		if [ -f ts3server ]; then
			chmod 0755 ts3server
		else
			chmod 0755 ts3server_*
		fi
		
		if [ -f ${INSTANCE_PATH}/ts3server_startscript.sh ]; then
			chmod 0755 ${INSTANCE_PATH}/ts3server_startscript.sh
		fi

		# Accept TeamSpeak server license agreement
		# Required since TeamSpeak server version 3.1.0
		if [[ ${RELEASE_NUMBER}  =~ ^[3-9]+\.1[2-9]*\.[0-9]+\.?[0-9]*$ ]]; then
			if [[ ! -f ${INSTANCE_PATH}/.ts3server_license_accepted ]]; then
				touch ${INSTANCE_PATH}/.ts3server_license_accepted
			fi
		fi
		
		# Change owner and group of files
		if [[ -z "$GROUP" ]]; then
			chown ${OWNER} -R ${INSTANCE_PATH}/
		elif [[ -z "$OWNER" ]]; then
			chgrp ${GROUP} -R ${INSTANCE_PATH}/
		else
			chown ${OWNER}:${GROUP} -R ${INSTANCE_PATH}/
		fi

		cd - > /dev/null

		if [[ "$UPDATE_STATUS_FLAG" -eq 0 ]]; then
			return 0;
		fi
	fi
	
	return 1;
}

# Creates a debug report for the failed TeamSpeak 3 server instance
# Par 1: TeamSpeakRootDirectory:string
# Return: 0:boolean or 1:boolean
function createDebugReport() {
	# Don't write debug report to debug file
	if [ ${PAR_DEBUG} -eq 1 ]; then
		set +x
	fi
	TEAMSPEAK_ROOT_DIRECTORY="${1}"

	CURRENT_DATE_TIME="$(date +'%Y%m%d-%H%M')"
	DEBUG_REPORT_FILE="${TEAMSPEAK_ROOT_DIRECTORY}/${CURRENT_DATE_TIME}-ts3us-debug-report.md"

	TEMP_BACKUP_DIR=$(getTempBackupDir)

	if [ ! -f "${DEBUG_REPORT_FILE}" ]; then
		echo -e "# TS3tools TS3UpdateScript Debug Report\n" >> ${DEBUG_REPORT_FILE};
		echo	"Date and time of report: ${CURRENT_DATE_TIME}" >> ${DEBUG_REPORT_FILE};
		echo	"TS3UpdateScript Installation Path: ${ABSOLUTE_PATH}" >> ${DEBUG_REPORT_FILE};
		echo	"TS3UpdateScript Version: ${SCRIPT_VERSION}" >> ${DEBUG_REPORT_FILE};
		echo -e "TS3UpdateScript Parameters: ${PAR_LIST}\n" >> ${DEBUG_REPORT_FILE};

		echo -e "## TS3UpdateScript output\n" >> ${DEBUG_REPORT_FILE};
		echo -e "Please copy and paste the output of the shell below this line and/or attach a debug file of this script.\n" >> ${DEBUG_REPORT_FILE};

		echo -e "## Operating System Details\n" >> ${DEBUG_REPORT_FILE};
		echo -e "$(lsb_release -idrc)\n" >> ${DEBUG_REPORT_FILE};
		echo -e "$(uname -a)\n" >> ${DEBUG_REPORT_FILE};

		echo -e "### root User locale\n" >> ${DEBUG_REPORT_FILE};
		echo -e "$(locale)\n" >> ${DEBUG_REPORT_FILE};

		echo -e "### ${OWNER} User locale\n" >> ${DEBUG_REPORT_FILE};
		echo -e "$(su -s $(which bash) -c 'locale' - ${OWNER})\n" >> ${DEBUG_REPORT_FILE};
	fi

	echo -e "## TS3 Update Details\n" >> ${DEBUG_REPORT_FILE};
	echo	"Update path: ${INSTALLED_TS3_SERVER_VERSION} -> ${LATEST_TS3_SERVER_VERSION}" >> ${DEBUG_REPORT_FILE};
	echo	"Instance path: ${TEAMSPEAK_ROOT_DIRECTORY}" >> ${DEBUG_REPORT_FILE};
	if isFilesStorageExternal ${TEAMSPEAK_ROOT_DIRECTORY}; then
		echo	"Type Of Files Storage: Local disk" >> ${DEBUG_REPORT_FILE};
	else
		echo	"Type Of Files Storage: Shared network storage" >> ${DEBUG_REPORT_FILE};
	fi

	if [[ "$PAR_INFORM_ONLINE_CLIENTS" -eq 1 ]] || [[ $(checkdeps telnet expect) -eq 0 ]]; then
		echo	"ServerQuery IP: ${SERVER_QUERY_IP}" >> ${DEBUG_REPORT_FILE};
		echo	"ServerQuery Port: ${SERVER_QUERY_PORT}" >> ${DEBUG_REPORT_FILE};
	fi

	echo	"Installed TS3 Server Version: ${INSTALLED_TS3_SERVER_VERSION}" >> ${DEBUG_REPORT_FILE};
	echo	"Installed TS3 Server Build: ${INSTALLED_TS3_SERVER_BUILD}" >> ${DEBUG_REPORT_FILE};
	echo	"Installed TS3 Server Platform: ${INSTALLED_TS3_SERVER_PLATFORM}" >> ${DEBUG_REPORT_FILE};
	echo	"TS3 Server Instance Log Path: ${TS3_SERVER_INSTANCE_LOG_PATH}" >> ${DEBUG_REPORT_FILE};
	echo	"TS3 Server Architecture: ${TS3_SERVER_ARCHITECTURE}" >> ${DEBUG_REPORT_FILE};
	echo	"*nix Owner: ${OWNER} (UID ${OWNER_ID})" >> ${DEBUG_REPORT_FILE};
	echo	"*nix Group: ${GROUP} (GID ${GROUP_ID})" >> ${DEBUG_REPORT_FILE};
	echo	"Database Type: ${DATABASE_TYPE}" >> ${DEBUG_REPORT_FILE};
	echo	"Update Text (Manually): $(getManuallyPokeMessage ${LATEST_TS3_SERVER_VERSION})" >> ${DEBUG_REPORT_FILE};
	echo	"Update Text (Cronjob): $(getCronjobPokeMessage ${LATEST_TS3_SERVER_VERSION})" >> ${DEBUG_REPORT_FILE};
	echo	"Ignore Clients: $(getIgnoreClientList)" >> ${DEBUG_REPORT_FILE};
	echo -e "Ignore ServerGroups: $(getIgnoreServerGroupsList)\n" >> ${DEBUG_REPORT_FILE};

	echo -e "## INI Files\n" >> ${DEBUG_REPORT_FILE};
	echo -e "### ts3server.ini\n" >> ${DEBUG_REPORT_FILE};
	if INIFileExists ${TEAMSPEAK_ROOT_DIRECTORY}; then
		echo -e "$(< ${TEAMSPEAK_ROOT_DIRECTORY}/ts3server.ini)\n" >> ${DEBUG_REPORT_FILE};

		DATABASE_INI_FILE="$(getDatabaseINIFile ${TEAMSPEAK_ROOT_DIRECTORY})"

		echo -e "### Database INI-file\n" >> ${DEBUG_REPORT_FILE};
		if [ -f "${TEAMSPEAK_ROOT_DIRECTORY}/${DATABASE_INI_FILE}" ]; then
			echo -e "$(< ${TEAMSPEAK_ROOT_DIRECTORY}/${DATABASE_INI_FILE})\n" >> ${DEBUG_REPORT_FILE};
			sed -i 's/.*password=.*/password=CENSORED_PASS/g' ${DEBUG_REPORT_FILE};
		else
			echo -e "Database INI-file does not exist\n" >> ${DEBUG_REPORT_FILE};
		fi
	else
		echo -e "ts3server.ini file does not exist\n" >> ${DEBUG_REPORT_FILE};
	fi

	echo -e "## Log files\n" >> ${DEBUG_REPORT_FILE};
	echo -e "### Instance Log file\n" >> ${DEBUG_REPORT_FILE};
	echo -e "$(find ${TS3_SERVER_INSTANCE_LOG_PATH} -name *_0.log | sort -nr | head -1 | tr -d '\n' | xargs -0 cat)\n" >> ${DEBUG_REPORT_FILE};

	echo -e "### Backtrace using gdb\n" >> ${DEBUG_REPORT_FILE};
	TS3BINARY="$(grep BINARYNAME ${TEAMSPEAK_ROOT_DIRECTORY}/ts3server_startscript.sh | head -1 | cut -d "=" -f 2 | tr -d '"')"

	if INIFileExists ${TEAMSPEAK_ROOT_DIRECTORY}; then
		(
			cat <<- GDD_BACKTRACE
				spawn su -s "$(which bash)" -c "cd $1 && export LD_LIBRARY_PATH=\".:$LD_LIBRARY_PATH\" && gdb ${TS3BINARY} && cd - > /dev/null" - $(getOwnerOfTS3ServerFiles $1)
				expect "(gdb)"
				send {run -x start inifile=ts3server.ini}
				expect "run -x start"
				send "\r"
				expect "(gdb)"
				send "bt\r"
				expect "(gdb)"
				send "quit\r"
			GDD_BACKTRACE
		) | expect >> ${TEMP_BACKUP_DIR}/${CURRENT_DATE_TIME}-ts3us-debug-report.md
	else
		(
			cat <<- GDD_BACKTRACE
				spawn su -s "$(which bash)" -c "cd $1 && export LD_LIBRARY_PATH=\".:$LD_LIBRARY_PATH\" && gdb ${TS3BINARY} && cd - > /dev/null" - $(getOwnerOfTS3ServerFiles $1)
				expect "(gdb)"
				send {run -x start}
				expect "run -x start"
				send "\r"
				expect "(gdb)"
				send "bt\r"
				expect "(gdb)"
				send "quit\r"
			GDD_BACKTRACE
		) | expect >> ${TEMP_BACKUP_DIR}/${CURRENT_DATE_TIME}-ts3us-debug-report.md
	fi

	cat ${TEMP_BACKUP_DIR}/${CURRENT_DATE_TIME}-ts3us-debug-report.md >> ${DEBUG_REPORT_FILE} && rm ${TEMP_BACKUP_DIR}/${CURRENT_DATE_TIME}-ts3us-debug-report.md
	echo -e "\n" >> ${DEBUG_REPORT_FILE};

	echo -e "### Virtual Server Log file(s)\n" >> ${DEBUG_REPORT_FILE};
	for logFile in $(find ${TS3_SERVER_INSTANCE_LOG_PATH} -name ts3server_$(date +'%Y-%m-%d__%H' -d "2 hour ago")_*.log); do
		VIRTUAL_SID=$(echo -n ${logFile} | grep -Eo '_[0-9]+\.log' | grep -Eo '[0-9]+');
		if [[ "${VIRTUAL_SID}" != "0" ]]; then
			echo	"**Virtual Server ID: ${VIRTUAL_SID}**" >> ${DEBUG_REPORT_FILE};
			cat ${logFile} >> ${DEBUG_REPORT_FILE};
			echo -e "\n" >> ${DEBUG_REPORT_FILE};
		fi
	done

	echo	"### Permissions in ${TEAMSPEAK_ROOT_DIRECTORY}" >> ${DEBUG_REPORT_FILE};
	for ts3Directory in $(find "${TEAMSPEAK_ROOT_DIRECTORY}/" -maxdepth 3 -type d); do
		if [[ ! "${ts3Directory}" =~ files|serverquerydocs|doc|logs ]]; then
			echo -e "\n${ts3Directory}" >> ${DEBUG_REPORT_FILE};
			ls -lha "${ts3Directory}" >> ${DEBUG_REPORT_FILE};
		fi
	done

	if [ ${PAR_DEBUG} -eq 1 ]; then
		set -x
	fi

	if [ -f "${DEBUG_REPORT_FILE}" ]; then
		return 0;
	else
		return 1;
	fi
}

# Main program
function main() {
	# Load text for set language
	cd "$ABSOLUTE_PATH"
	source "${ABSOLUTE_PATH}/$PAR_LOCALE";
	cd - > /dev/null

	# Enable debugging by commenting out the following line
	if [[ -n "$PAR_DEBUG" ]] && [[ "$PAR_DEBUG" == 1 ]]; then
		echo "$TXT_DEBUG_INFO: ${PAR_LIST} [v${SCRIPT_VERSION}]";
		set -x
	fi

	##
	## SELFTESTS
	##
	# Time measurement self-tests START
	TIME_MEASUREMENT_SELFTESTS_START=$(date +%s)

	TEMP_BACKUP_DIR=$(getTempBackupDir)
	PERSISTENT_BACKUP_DIR=$(getPersistentBackupDir)

	if [ "$PAR_CRONJOB_TASK" -eq 1 ]; then
		echo -n "${TXT_SELF_TEST_INFO}";
	else
		echo -en "${SCurs}${TXT_SELF_TEST_INFO}";
		echo -e "${RCurs}${MCurs}[ ${Whi}.. ${RCol}]\n";
	fi

	# Self-Tests status flag
	SELF_TEST_STATUS=0;

	# Check bash-completion of script
	if ! isBashCompletionInstalled; then
		if ! setUpBashCompletion; then
			echo "${TXT_SELF_TEST_CHECK_BASH_COMPLETION}" >> SELF_TEST_STATUS.txt;
			SELF_TEST_STATUS=1;
		fi
	fi

	# Migrate multiple configuration files to one
	if [[ ! -f ${ABSOLUTE_PATH}/configs/config.all ]]; then
		migrateMultipleConfigFilesToOne
	fi

	# Able to reach all needed remote server?
	if [[ "$PAR_DEACTIVATE_HOST_ALIVE_CHECK" -eq 0 ]]; then
		if ! testInternetConnectivity "files.teamspeak-services.com"; then
			echo "files.teamspeak-services.com ${TXT_SELF_TEST_CONNECTIVITY}" >> SELF_TEST_STATUS.txt;
			SELF_TEST_STATUS=1;
		fi

		if ! testInternetConnectivity "github.com"; then
			echo "github.com ${TXT_SELF_TEST_CONNECTIVITY}" >> SELF_TEST_STATUS.txt;
			SELF_TEST_STATUS=1;
		fi

		if ! testInternetConnectivity "raw.githubusercontent.com"; then
			echo "raw.githubusercontent.com ${TXT_SELF_TEST_CONNECTIVITY}" >> SELF_TEST_STATUS.txt;
			SELF_TEST_STATUS=1;
		fi
	fi

	# Latest version of script installed?
	LATEST_SCRIPT_VERSION=$(getLatestScriptVersion)

	if [[ "$LATEST_SCRIPT_VERSION" != 1 ]] && [[ "$PAR_UPDATE_SCRIPT" -eq 0 ]]; then
		if [[ -n "$LATEST_SCRIPT_VERSION" ]]; then
			if [[ "$SCRIPT_VERSION" != "$LATEST_SCRIPT_VERSION" ]]; then
				echo -e "${TXT_SELF_TEST_TS3UPDATESCRIPT_RELEASED}: ./$SCRIPT_NAME --update-script\n" >> SELF_TEST_STATUS.txt;
			fi
		else
			echo "${TXT_SELF_TEST_DETECTION_FAILED}" >> SELF_TEST_STATUS.txt;
			SELF_TEST_STATUS=1;
		fi
	fi

	# Execute software checks
	if [[ $(checkdeps bash which rsync wget grep sed bzip2 gdb) -eq 1 ]]; then
		SELF_TEST_STATUS=1;
	fi

	# Debian specific packages
	if [ -f /etc/debian_version ]; then
		if [[ $(checkdeps "lsb_release:lsb-release") -eq 1 ]]; then
			SELF_TEST_STATUS=1;
		fi
	# RedHat/CentOS specific
	elif [ -f /etc/redhat-release ]; then
		if [[ $(checkdeps "lsb_release:redhat-lsb") -eq 1 ]]; then
			SELF_TEST_STATUS=1;
		fi
	else
		if [[ $(checkdeps lsb_release) -eq 1 ]]; then
			SELF_TEST_STATUS=1;
		fi
	fi

	# Task/Parameter specific
	if [ "$PAR_INFORM_ONLINE_CLIENTS" -eq 1 ]; then
		if [[ $(checkdeps telnet expect) -eq 1 ]]; then
			SELF_TEST_STATUS=1;
		fi
	fi

	if [ "$PAR_CRONJOB_TASK" -eq 1 ]; then
		if [[ $(checkdeps mail) -eq 1 ]]; then
			SELF_TEST_STATUS=1;
		fi
	fi

	# Detect known cron.d path
	if [[ "$PAR_INSTALL_CRONJOB" -eq 1 ]] || [[ "$PAR_DEINSTALL_CRONJOB" -eq 1 ]]; then
		CROND_PATH="$(detectKnownCronDPath)"

		if [[ "$CROND_PATH" == "1" ]]; then
			echo "${TXT_SELF_TEST_SCRIPT_SUPPORT}" >> SELF_TEST_STATUS.txt;
			SELF_TEST_STATUS=1;
		fi
	fi

	# Set own settings in config files?
	if ! scriptSettingsChanged; then
		echo "${TXT_SELF_TEST_ADMINISTRATOR_EMAIL}" >> SELF_TEST_STATUS.txt;
		SELF_TEST_STATUS=1;
	fi

	# Check if temporary backup directory exists
	if ! getTempBackupDir; then
		echo "${TXT_SELF_TEST_TEMP_BACKUP_DIR}" >> SELF_TEST_STATUS.txt;
		SELF_TEST_STATUS=1;
	fi

	# Check if persistent backup directory exists
	if ! getPersistentBackupDir; then
		echo "${TXT_SELF_TEST_PERSISTENT_BACKUP_DIR}" >> SELF_TEST_STATUS.txt;
		SELF_TEST_STATUS=1;
	fi

	# Time measurement self-tests END
	TIME_MEASUREMENT_SELFTESTS_END=$(date +%s)

	# Run other tasks, if all self-tests were successfull
	if [[ "$SELF_TEST_STATUS" -eq 1 ]]; then
		if [ "$PAR_CRONJOB_TASK" -eq 1 ]; then
			echo "[ FAILED ]";
		else
			echo -e "${RCurs}${MCurs}[ ${Red}FAILED ${RCol}]\n";
		fi

		# Show failed self-tests
		if [[ -f SELF_TEST_STATUS.txt ]]; then
			cat SELF_TEST_STATUS.txt;
		fi

		echo "${TXT_SELF_TEST_FAILED}";
	else
		if [ "$PAR_CRONJOB_TASK" -eq 1 ]; then
			echo "[ OK ]";
		else
			echo -e "${RCurs}${MCurs}[ ${Gre}OK ${RCol}]\n";
		fi

		# Show TS3UpdateScript update message
		if [[ -f SELF_TEST_STATUS.txt ]]; then
			cat SELF_TEST_STATUS.txt
		fi

		if [[ "$PAR_DEINSTALL_CRONJOB" -eq 0 ]] && [[ "$PAR_UPDATE_SCRIPT" -eq 0 ]]; then
			##
			## COLLECTING INFORMATION
			##
			# Time measurement collecting information START
			TIME_MEASUREMENT_COLLECTING_INFORMATION_START=$(date +%s)
			# Collecting information status flag
			COLLECTING_INFORMATION_STATUS=0;

			if [ "$PAR_CRONJOB_TASK" -eq 1 ]; then
				echo -n "${TXT_COLLECTING_INFORMATION_INFO}";
			else
				echo -en "${SCurs}${TXT_COLLECTING_INFORMATION_INFO}";
				echo -e "${RCurs}${MCurs}[ ${Whi}.. ${RCol}]\n";
			fi

			# Detect all information for each TeamSpeak 3 instance
			if findTS3ServerInstances; then
				LATEST_TS3_SERVER_VERSION="$(getLatestTSServerVersion)"

				if [[ "$LATEST_TS3_SERVER_VERSION" != "1" ]]; then
					echo "# Status|InstancePath|InstalledTS3ServerVersion|InstalledTS3ServerBuild|InstalledTS3ServerPlatform|TS3ServerInstanceLogPath|TS3ServerArchitecture|Owner|OwnerID|Group|GroupID|ServerQueryIP|ServerQueryPort|DatabaseType" > TS3InstanceInfos.txt;

					INSTANCE_COUNT="$(wc -l < TS3InstancePaths.txt)"

					if [ "$INSTANCE_COUNT" -eq 0 ]; then
						echo "${TXT_COLLECTING_INFORMATION_NO_TS3SERVER_INSTANCES_FOUND}" > COLLECTING_INFORMATION_STATUS.txt;
					elif [ "$INSTANCE_COUNT" -eq 1 ]; then
						echo "${INSTANCE_COUNT} ${TXT_COLLECTING_INFORMATION_FOUND_ONE_TS3SERVER_INSTANCE}" > COLLECTING_INFORMATION_STATUS.txt;
					else
						echo "${INSTANCE_COUNT} ${TXT_COLLECTING_INFORMATION_FOUND_MORE_TS3SERVER_INSTANCES}" > COLLECTING_INFORMATION_STATUS.txt;
					fi

					while read instancePath; do
						INSTANCE_PATH=$(dirname $instancePath)

						echo -e "\n${TXT_COLLECTING_INFORMATION_COLLECTING_INFO}: ${INSTANCE_PATH}" >> COLLECTING_INFORMATION_STATUS.txt;

						# Detect database type (SQLite, MySQL or MariaDB)
						DATABASE_TYPE="$(getDatabaseType ${INSTANCE_PATH})"

						if [[ "$DATABASE_TYPE" == "1" ]]; then
							echo "${TXT_COLLECTING_INFORMATION_DATABASE_DETECTION_FAILED}" >> COLLECTING_INFORMATION_STATUS.txt;
							COLLECTING_INFORMATION_STATUS=1;
						fi

						if [[ "$PAR_INFORM_ONLINE_CLIENTS" -eq 1 ]] || [[ $(checkdeps telnet expect) -eq 0 ]]; then
							# Detect ServerQuery IP
							SERVER_QUERY_IP="$(getServerQueryIP ${INSTANCE_PATH})";

							if [[ -z "$SERVER_QUERY_IP" ]]; then
								echo "${TXT_COLLECTING_INFORMATION_SERVERQUERY_IP_DETECTION_FAILED}" >> COLLECTING_INFORMATION_STATUS.txt;
								COLLECTING_INFORMATION_STATUS=1;
							fi

							# Detect ServerQuery Port
							SERVER_QUERY_PORT="$(getServerQueryPort ${INSTANCE_PATH})";

							if [[ -z "$SERVER_QUERY_PORT" ]]; then
								echo "${TXT_COLLECTING_INFORMATION_SERVERQUERY_PORT_DETECTION_FAILED}" >> COLLECTING_INFORMATION_STATUS.txt;
								COLLECTING_INFORMATION_STATUS=1;
							fi
						fi

						# Detect version
						if ts3server ${INSTANCE_PATH} status; then
							if [[ "$PAR_INFORM_ONLINE_CLIENTS" -eq 1 ]] || [[ $(checkdeps telnet expect) -eq 0 ]]; then
								INSTALLED_TS3_SERVER_VERSION="$(getVersionOfInstalledTS3Server ${SERVER_QUERY_IP} ${SERVER_QUERY_PORT})";
							else
								INSTALLED_TS3_SERVER_VERSION="$(getVersionOfInstalledTS3Server ${INSTANCE_PATH})";
							fi
						else
							INSTALLED_TS3_SERVER_VERSION="$(getVersionOfInstalledTS3Server ${INSTANCE_PATH})";
						fi

						if [[ "$INSTALLED_TS3_SERVER_VERSION" == "1" ]]; then
							echo "${TXT_COLLECTING_INFORMATION_INSTALLED_TS3SERVER_VERSION_DETECTION_FAILED}" >> COLLECTING_INFORMATION_STATUS.txt;
							COLLECTING_INFORMATION_STATUS=1;
						fi

						# Detect build
						if ts3server ${INSTANCE_PATH} status; then
							if [[ "$PAR_INFORM_ONLINE_CLIENTS" -eq 1 ]] || [[ $(checkdeps telnet expect) -eq 0 ]]; then
								INSTALLED_TS3_SERVER_BUILD="$(getBuildOfInstalledTS3Server ${SERVER_QUERY_IP} ${SERVER_QUERY_PORT})";
							else
								INSTALLED_TS3_SERVER_BUILD="$(getBuildOfInstalledTS3Server)";
							fi
						else
							INSTALLED_TS3_SERVER_BUILD="$(getBuildOfInstalledTS3Server)";
						fi

						if [[ "$INSTALLED_TS3_SERVER_BUILD" == "1" ]]; then
							echo "${TXT_COLLECTING_INFORMATION_INSTALLED_TS3SERVER_BUILD_DETECTION_FAILED}" >> COLLECTING_INFORMATION_STATUS.txt;
							COLLECTING_INFORMATION_STATUS=1;
						fi

						# Detect platform
						if ts3server ${INSTANCE_PATH} status; then
							if [[ "$PAR_INFORM_ONLINE_CLIENTS" -eq 1 ]] || [[ $(checkdeps telnet expect) -eq 0 ]]; then
								INSTALLED_TS3_SERVER_PLATFORM="$(getPlatformOfInstalledTS3Server ${SERVER_QUERY_IP} ${SERVER_QUERY_PORT})";
							else
								INSTALLED_TS3_SERVER_PLATFORM="$(getPlatformOfInstalledTS3Server ${INSTANCE_PATH})";
							fi
						else
							INSTALLED_TS3_SERVER_PLATFORM="$(getPlatformOfInstalledTS3Server ${INSTANCE_PATH})";
						fi

						if [[ "$INSTALLED_TS3_SERVER_PLATFORM" == "1" ]]; then
							echo "${TXT_COLLECTING_INFORMATION_INSTALLED_TS3SERVER_PLATFORM_DETECTION_FAILED}" >> COLLECTING_INFORMATION_STATUS.txt;
							COLLECTING_INFORMATION_STATUS=1;
						fi

						# Detect instance log path
						TS3_SERVER_INSTANCE_LOG_PATH="$(getTS3ServerInstanceLogPath ${INSTANCE_PATH})";

						if [[ "$TS3_SERVER_INSTANCE_LOG_PATH" == "1" ]]; then
							echo "${TXT_COLLECTING_INFORMATION_INSTANCE_LOG_PATH_DETECTION_FAILED}" >> COLLECTING_INFORMATION_STATUS.txt;
							COLLECTING_INFORMATION_STATUS=1;
						fi

						# Check for lines with 'The system locale is set to'
						if ! checkSystemLocale ${INSTANCE_PATH}; then
							displayBPAText "${TXT_COLLECTING_INFORMATION_SYSTEM_LOCALE}"
						fi

						# Detect architecture
						TS3_SERVER_ARCHITECTURE="$(getArchitectureOfInstalledTS3Server ${INSTANCE_PATH})";

						if [[ "$TS3_SERVER_ARCHITECTURE" == "1" ]]; then
							echo "${TXT_COLLECTING_INFORMATION_INSTALLED_TS3SERVER_ARCHITECTURE_DETECTION_FAILED}" >> COLLECTING_INFORMATION_STATUS.txt;
							COLLECTING_INFORMATION_STATUS=1;
						fi

						# Detect owner
						OWNER="$(getOwnerOfTS3ServerFiles ${INSTANCE_PATH})";

						if [[ "$OWNER" != "1" ]]; then
							if [[ "$PAR_DEACTIVATE_PERMISSIONS_CHECK" -eq 0 ]]; then
								if [[ "$OWNER" == "UNKNOWN" ]]; then
									echo "${TXT_COLLECTING_INFORMATION_OWNER_UNKNOWN_PERMISSIONS_INFO}" >> COLLECTING_INFORMATION_STATUS.txt;
									COLLECTING_INFORMATION_STATUS=1;
								fi

								if [[ "$OWNER" == "root" ]]; then
									displayBPAText "${TXT_COLLECTING_INFORMATION_OWNER_ROOT_PERMISSIONS_INFO}"
								fi
							fi
						else
							displayBPAText "${TXT_COLLECTING_INFORMATION_OWNER_DETECTION_FAILED}"
						fi

						# Detect owner ID
						OWNER_ID="$(getOwnerID ${INSTANCE_PATH})";

						if [[ "$OWNER_ID" == "1" ]]; then
							displayBPAText "${TXT_COLLECTING_INFORMATION_OWNER_USER_ID_DETECTION_FAILED}"
						fi

						# Check shell and display warning, if a valid shell is in use
						if isShellOfOwnerValid ${OWNER}; then
							displayBPAText "${TXT_COLLECTING_INFORMATION_IS_SHELL_VALID_FAILED}"
						fi

						# Detect group
						GROUP="$(getGroupOfTS3ServerFiles ${INSTANCE_PATH})";

						if [[ "$GROUP" != "1" ]]; then
							if [[ "$PAR_DEACTIVATE_PERMISSIONS_CHECK" -eq 0 ]]; then
								if [[ "$GROUP" == "UNKNOWN" ]]; then
									echo "${TXT_COLLECTING_INFORMATION_GROUP_UNKNOWN_PERMISSIONS_INFO}" >> COLLECTING_INFORMATION_STATUS.txt;
									COLLECTING_INFORMATION_STATUS=1;
								fi

								if [[ "$GROUP" == "root" ]]; then
									displayBPAText "${TXT_COLLECTING_INFORMATION_GROUP_ROOT_PERMISSIONS_INFO}"
								fi
							fi
						else
							displayBPAText "${TXT_COLLECTING_INFORMATION_GROUP_DETECTION_FAILED}"
						fi

						# Detect group ID
						GROUP_ID="$(getGroupID ${INSTANCE_PATH})";

						if [[ "$GROUP_ID" == "1" ]]; then
							displayBPAText "${TXT_COLLECTING_INFORMATION_GROUP_GROUP_ID_DETECTION_FAILED}"
						fi

						# Check files/ storage and display warning, if a non-external storage is in use
						if isFilesStorageExternal ${INSTANCE_PATH}; then
							displayBPAText "${TXT_COLLECTING_INFORMATION_IS_FILES_STORAGE_EXTERNAL_FAILED}"
						fi

						# Set textbased status flag based on collecting information status flag
						if [[ "$COLLECTING_INFORMATION_STATUS" -eq 1 ]]; then
							STATUS="FAILED"
						else
							STATUS="OK"
						fi

						echo "${STATUS}|${INSTANCE_PATH}|${INSTALLED_TS3_SERVER_VERSION}|${INSTALLED_TS3_SERVER_BUILD}|${INSTALLED_TS3_SERVER_PLATFORM}|${TS3_SERVER_INSTANCE_LOG_PATH}|${TS3_SERVER_ARCHITECTURE}|${OWNER}|${OWNER_ID}|${GROUP}|${GROUP_ID}|${SERVER_QUERY_IP}|${SERVER_QUERY_PORT}|${DATABASE_TYPE}" >> TS3InstanceInfos.txt;
					done < TS3InstancePaths.txt

					if [[ "$PAR_INFORM_ONLINE_CLIENTS" -eq 1 ]] || [[ "$PAR_TEST_INFORM_ONLINE_CLIENTS" -eq 1 ]]; then
						# Get ServerQuery Displayed Name
						SERVER_QUERY_DISPLAYED_NAME="$(getServerQueryDisplayedNameEscaped)"

						if [[ "$SERVER_QUERY_DISPLAYED_NAME" == "1" ]]; then
							echo "${TXT_COLLECTING_INFORMATION_SERVERQUERY_DISPLAYED_NAME_FAILED}" >> COLLECTING_INFORMATION_STATUS.txt;
							COLLECTING_INFORMATION_STATUS=1;
						fi

						# Get poke message
						if [[ "$PAR_CRONJOB_TASK" -eq 1 ]]; then
							POKE_MESSAGE_ESCAPED="$(getCronjobPokeMessageEscaped ${LATEST_TS3_SERVER_VERSION})"

							if [[ "$POKE_MESSAGE_ESCAPED" == "1" ]]; then
								echo "${TXT_COLLECTING_INFORMATION_CRONJOB_POKE_MESSAGE_FAILED}" >> COLLECTING_INFORMATION_STATUS.txt;
								COLLECTING_INFORMATION_STATUS=1;
							fi
						else
							POKE_MESSAGE_ESCAPED="$(getManuallyPokeMessageEscaped ${LATEST_TS3_SERVER_VERSION})"

							if [[ "$POKE_MESSAGE_ESCAPED" == "1" ]]; then
								echo "${TXT_COLLECTING_INFORMATION_MANUALLY_POKE_MESSAGE_FAILED}" >> COLLECTING_INFORMATION_STATUS.txt;
								COLLECTING_INFORMATION_STATUS=1;
							fi
						fi
					fi

					# Get administrator eMail
					if [[ "$PAR_INSTALL_CRONJOB" -eq 1 ]]; then
						ADMINISTRATOR_EMAIL="$(getAdministratorEmail)"

						if [[ "$ADMINISTRATOR_EMAIL" == "1" ]]; then
							echo "${TXT_COLLECTING_INFORMATION_ADMINISTRATOR_EMAIL_FAILED}" >> COLLECTING_INFORMATION_STATUS.txt;
							COLLECTING_INFORMATION_STATUS=1;
						fi
					fi
				else
					echo "${TXT_COLLECTING_INFORMATION_LATEST_TS3SERVER_VERSION_FAILED}" >> COLLECTING_INFORMATION_STATUS.txt;
					COLLECTING_INFORMATION_STATUS=1;
				fi
			else
				echo "${TXT_COLLECTING_INFORMATION_FAILED}" >> COLLECTING_INFORMATION_STATUS.txt;
				COLLECTING_INFORMATION_STATUS=1;
			fi

			# TSDNS

			# Time measurement collecting information END
			TIME_MEASUREMENT_COLLECTING_INFORMATION_END=$(date +%s)
		fi

		##
		## VALIDATION
		##
		# Time measurement validation START
		TIME_MEASUREMENT_VALIDATION_START=$(date +%s)
		# Validation status flag
		VALIDATION_STATUS=0;

		echo "${TXT_VALIDATION_INFO}" > VALIDATION_STATUS.txt;

		if [[ "$PAR_DEINSTALL_CRONJOB" -eq 0 ]] && [[ "$PAR_UPDATE_SCRIPT" -eq 0 ]]; then
			while read instanceInfo; do
				STATUS_FLAG=$(echo "$instanceInfo" | grep -Ev "^#" | cut -d "|" -f 1)
				INSTANCE_PATH=$(echo "$instanceInfo" | grep -Ev "^#" | cut -d "|" -f 2)
				INSTALLED_TS3_SERVER_VERSION=$(echo "$instanceInfo" | grep -Ev "^#" | cut -d "|" -f 3)
				INSTALLED_TS3_SERVER_BUILD=$(echo "$instanceInfo" | grep -Ev "^#" | cut -d "|" -f 4)
				INSTALLED_TS3_SERVER_PLATFORM=$(echo "$instanceInfo" | grep -Ev "^#" | cut -d "|" -f 5)
				TS3SERVER_INSTANCE_LOG_PATH=$(echo "$instanceInfo" | grep -Ev "^#" | cut -d "|" -f 6)
				TS3SERVER_ARCHITECTURE=$(echo "$instanceInfo" | grep -Ev "^#" | cut -d "|" -f 7)
				OWNER=$(echo "$instanceInfo" | grep -Ev "^#" | cut -d "|" -f 8)
				OWNER_ID=$(echo "$instanceInfo" | grep -Ev "^#" | cut -d "|" -f 9)
				GROUP=$(echo "$instanceInfo" | grep -Ev "^#" | cut -d "|" -f 10)
				GROUP_ID=$(echo "$instanceInfo" | grep -Ev "^#" | cut -d "|" -f 11)
				SERVERQUERY_IP=$(echo "$instanceInfo" | grep -Ev "^#" | cut -d "|" -f 12)
				SERVERQUERY_PORT=$(echo "$instanceInfo" | grep -Ev "^#" | cut -d "|" -f 13)
				DATABASE_TYPE=$(echo "$instanceInfo" | grep -Ev "^#" | cut -d "|" -f 14)

				if [ -n "$STATUS_FLAG" ]; then
					if [ "$STATUS_FLAG" == "FAILED" ]; then
						echo "${INSTANCE_PATH}: ${TXT_VALIDATION_DETECTION_FAILED}" >> VALIDATION_STATUS.txt;
					fi

					# Check serveradmin password
					if [[ "$PAR_INFORM_ONLINE_CLIENTS" -eq 1 ]] || [[ $(checkdeps telnet expect) -eq 0 ]]; then
						if ts3server ${INSTANCE_PATH} status; then
							if ! checkServeradminPassword ${SERVERQUERY_IP} ${SERVERQUERY_PORT} ${INSTANCE_PATH}; then
								echo "${TXT_VALIDATION_WRONG_PASSWORD}: ${INSTANCE_PATH}/.password-file" >> VALIDATION_STATUS.txt;
								VALIDATION_STATUS=1;
							fi
						else
							echo "${INSTANCE_PATH}: ${TXT_VALIDATION_TS3SERVER_OFFLINE}" >> VALIDATION_STATUS.txt;
						fi
					fi
				fi
			done < TS3InstanceInfos.txt
		fi

		# Time measurement validation END
		TIME_MEASUREMENT_VALIDATION_END=$(date +%s)

		if [[ "$COLLECTING_INFORMATION_STATUS" -eq 1 ]] || [[ "$VALIDATION_STATUS" -eq 1 ]]; then
			if [ "$PAR_CRONJOB_TASK" -eq 1 ]; then
				echo "[ FAILED ]";
			else
				echo -e "${RCurs}${MCurs}[ ${Red}FAILED ${RCol}]\n";
			fi

			# Show collecting information errors
			cat COLLECTING_INFORMATION_STATUS.txt
			# Show validation errors
			cat VALIDATION_STATUS.txt

			echo "${TXT_VALIDATION_FAILED}";
		else
			if [ "$PAR_CRONJOB_TASK" -eq 1 ]; then
				echo "[ OK ]";

				echo "${TXT_VALIDATION_INFO_SUCCESS} [ INFO ]";
			else
				echo -e "${RCurs}${MCurs}[ ${Gre}OK ${RCol}]\n";

				echo -en "${SCurs}${TXT_VALIDATION_INFO_SUCCESS}";
				echo -e "${RCurs}${MCurs}[ ${Cya}INFO ${RCol}]\n";
			fi

			# Show validation warnings
			if [[ -f COLLECTING_INFORMATION_STATUS.txt ]]; then
				cat COLLECTING_INFORMATION_STATUS.txt
			fi

			##
			## EXECUTION MECHANISM
			##
			# Time measurement update mechanism START
			TIME_MEASUREMENT_EXECUTION_MECHANISM_START=$(date +%s)

			# Execution mechanism status flag
			EXECUTION_MECHANISM_STATUS=0;

			# Update script
			if [[ "$PAR_UPDATE_SCRIPT" -eq 1 ]]; then
				if [[ "$SCRIPT_VERSION" != "$LATEST_SCRIPT_VERSION" ]]; then
					if [[ "$PAR_CRONJOB_TASK" -eq 1 ]]; then
						UPDATE_SCRIPT_ANSWER=1;
					else
						UPDATE_SCRIPT_ANSWER=2;
						while [[ "$UPDATE_SCRIPT_ANSWER" -eq 2 ]]; do
							read -p "${TXT_EXECUTION_MECHANISM_SCRIPT_UPDATE_ANSWER} ([y]es/[n]o) " UPDATE_SCRIPT_ANSWER <&5

							if [[ -n "$UPDATE_SCRIPT_ANSWER" ]] && [[ "$UPDATE_SCRIPT_ANSWER" != "y" ]] && [[ "$UPDATE_SCRIPT_ANSWER" != "yes" ]] && [[ "$UPDATE_SCRIPT_ANSWER" != "n" ]] && [[ "$UPDATE_SCRIPT_ANSWER" != "no" ]]; then
								echo -en "${SCurs}${TXT_EXECUTION_MECHANISM_SCRIPT_UPDATE_ANSWER_ERROR}";
								echo -e "${RCurs}${MCurs}[ ${Red}ERROR ${RCol}]";
								UPDATE_SCRIPT_ANSWER=2;
							elif [[ "$UPDATE_SCRIPT_ANSWER" == "y" ]] || [[ "$UPDATE_SCRIPT_ANSWER" == "yes" ]]; then
								UPDATE_SCRIPT_ANSWER=1;
							elif [[ "$UPDATE_SCRIPT_ANSWER" == "n" ]] || [[ "$UPDATE_SCRIPT_ANSWER" == "no" ]]; then
								UPDATE_SCRIPT_ANSWER=0;
							fi
						done
					fi
				else
					UPDATE_SCRIPT_ANSWER=0;
				fi

				if [[ "$PAR_CRONJOB_TASK" -eq 1 ]]; then
					echo -n "${TXT_EXECUTION_MECHANISM_SCRIPT_UPDATE_INFO}";
				else
					echo -en "${SCurs}${TXT_EXECUTION_MECHANISM_SCRIPT_UPDATE_INFO}";
					echo -e "${RCurs}${MCurs}[ ${Whi}.. ${RCol}]";
				fi

				if [[ "$UPDATE_SCRIPT_ANSWER" -eq 1 ]]; then
					if updateTS3UpdateScript; then
						if [ "$PAR_CRONJOB_TASK" -eq 1 ]; then
							echo "[ Should be updated ]";
						else
							echo -e "${RCurs}${MCursBB}[ ${Gre}Should be updated ${RCol}]\n";
						fi
					else
						if [ "$PAR_CRONJOB_TASK" -eq 1 ]; then
							echo "[ FAILED ]";
						else
							echo -e "${RCurs}${MCurs}[ ${Red}FAILED ${RCol}]\n";
						fi
					fi
				elif [[ "$UPDATE_SCRIPT_ANSWER" -eq 0 ]]; then
					if [ "$PAR_CRONJOB_TASK" -eq 1 ]; then
						echo "[ Was not updated ]";
					else
						echo -e "${RCurs}${MCursBB}[ ${Cya}Was not updated ${RCol}]";
					fi
				fi
			# Display settings
			elif [[ "$PAR_DISPLAY_SETTINGS" -eq 1 ]]; then
				echo	"Following your settings:";
				echo    "############################################################################";
				echo -e "	Administrator E-Mail: $(getAdministratorEmail)\n";

				echo -e "	Displayed Username: $(getServerQueryDisplayedName)\n";

				echo	"	Update Text (Manually): $(getManuallyPokeMessage ${LATEST_TS3_SERVER_VERSION})";
				echo -e "	Update Text (Cronjob): $(getCronjobPokeMessage ${LATEST_TS3_SERVER_VERSION})\n";

				echo -e "	Latest Stable Release: $(grep LATEST_STABLE_RELEASE ${ABSOLUTE_PATH}/configs/config.all | cut -d '=' -f 2)\n";

				echo	"	Ignore Clients: $(getIgnoreClientList)";
				echo	"	Ignore ServerGroups: $(getIgnoreServerGroupsList)";
				echo	"############################################################################";
			# Install cronjob
			elif [[ "$PAR_INSTALL_CRONJOB" -eq 1 ]]; then
				if [ "$PAR_CRONJOB_TASK" -eq 1 ]; then
					echo -n "${TXT_EXECUTION_MECHANISM_CRONJOB_INSTALLATION_INFO}";
				else
					echo -en "${SCurs}${TXT_EXECUTION_MECHANISM_CRONJOB_INSTALLATION_INFO}";
					echo -e "${RCurs}${MCurs}[ ${Whi}.. ${RCol}]\n";
				fi

				CROND_PATH_FILE="${CROND_PATH}TS3UpdateScript"

				if [ "$CROND_PATH" == "/etc/fcron.cyclic/" ]; then
					echo -en "#!/usr/bin/env bash\n" > ${CROND_PATH_FILE};
					echo -en "PATH=/usr/local/bin:/usr/bin:/bin\n" >> ${CROND_PATH_FILE};
				else
					echo -en "PATH=/usr/local/bin:/usr/bin:/bin\n" > ${CROND_PATH_FILE};
				fi

				echo -en "MAILTO=\"$(getAdministratorEmail)\"\n\n" >> ${CROND_PATH_FILE};
				echo -en "# TS3UpdateScript: Cronjob(s) for auto updates\n\n" >> ${CROND_PATH_FILE};

				echo -e "  45 2 * * 1  root ${ABSOLUTE_PATH}/${SCRIPT_NAME} --update-script\n" >> ${CROND_PATH_FILE};

				if [[ -n "$PAR_CRONJOB_MINUTE" ]]; then
					CRONJOB_MINUTE=$PAR_CRONJOB_MINUTE;
				else
					CRONJOB_MINUTE="0";
				fi
				if [[ -n "$PAR_CRONJOB_HOUR" ]]; then
					CRONJOB_HOUR=$PAR_CRONJOB_HOUR;
				else
					CRONJOB_HOUR="3";
				fi

				while read instanceInfo; do
					INSTANCE_PATH=$(echo "$instanceInfo" | grep -Ev "^#" | cut -d "|" -f 2)

					if [[ -n "$INSTANCE_PATH" ]]; then
						echo -n "  ${CRONJOB_MINUTE} ${CRONJOB_HOUR} * * 1  root ${ABSOLUTE_PATH}/${SCRIPT_NAME} " >> ${CROND_PATH_FILE};

						echo -n "--path ${INSTANCE_PATH} " >> ${CROND_PATH_FILE};

						if [ "$PAR_CHECK" -eq 1 ]; then
							echo -n "--check " >> ${CROND_PATH_FILE};
						fi

						if [ "$PAR_DELETE_OLD_LOGS" -eq 1 ]; then
							echo -n "--delete-old-logs " >> ${CROND_PATH_FILE};
						fi

						if [ "$PAR_DISABLE_TEMPORARY_PASSWORD_BACKUP" -eq 1 ]; then
							echo -n "--disable-temporary-password-backup " >> ${CROND_PATH_FILE};
						fi

						if [ "$PAR_INFORM_ONLINE_CLIENTS" -eq 1 ]; then
							echo -n "--inform-online-clients " >> ${CROND_PATH_FILE};
						fi

						if [ "$PAR_WAITING_TIME_IN_MINUTES" -eq 1 ]; then
							echo -n "--waiting-time-in-minutes ${PAR_WAITING_TIME_MINS} " >> ${CROND_PATH_FILE};
						fi

						if [ "$PAR_KEEP_BACKUPS" -eq 1 ]; then
							echo -n "--keep-backups " >> ${CROND_PATH_FILE};
						fi

						if [ "$PAR_SET_RELEASE" -eq 1 ]; then
							echo -n "--set-release" >> ${CROND_PATH_FILE};
						fi

						if [ "$PAR_BETA_RELEASE" -eq 1 ]; then
							echo -n "--beta-release" >> ${CROND_PATH_FILE};
						fi

						echo -e "\n" >> ${CROND_PATH_FILE};

						if [ "$CRONJOB_MINUTE" == "50" ]; then
							CRONJOB_MINUTE="0";
							CRONJOB_HOUR=`expr $CRONJOB_HOUR + 1`
						else
							CRONJOB_MINUTE=`expr $CRONJOB_MINUTE + 10`
						fi
					fi
				done < TS3InstanceInfos.txt

				echo -en "# ^ ^ ^ ^ ^\n" >> ${CROND_PATH_FILE};
				echo -en "# | | | | |\n" >> ${CROND_PATH_FILE};
				echo -en "# | | | | |___ Weekday (0-7, Sunday is mostly 0)\n" >> ${CROND_PATH_FILE};
				echo -en "# | | | |_____ Month (1-12)\n" >> ${CROND_PATH_FILE};
				echo -en "# | | |_______ Day (1-31)\n" >> ${CROND_PATH_FILE};
				echo -en "# | |_________ Hour (0-23)\n" >> ${CROND_PATH_FILE};
				echo -en "# |___________ Minute (0-59)" >> ${CROND_PATH_FILE};

				# Set correct permissions for file
				chmod 644 ${CROND_PATH_FILE}

				if [[ $? -eq 0 ]]; then
					echo -e "${RCurs}${MCurs}[ ${Gre}OK ${RCol}]\n";

					echo "${TXT_EXECUTION_MECHANISM_CRONJOB_INSTALLATION_SUCCESSFUL} ${CROND_PATH_FILE}";
				else
					echo -e "${RCurs}${MCurs}[ ${Red}FAILED ${RCol}]\n";
					EXECUTION_MECHANISM_STATUS=1;
				fi
			# Deinstall cronjob
			elif [[ "$PAR_DEINSTALL_CRONJOB" -eq 1 ]]; then
				if [ "$PAR_CRONJOB_TASK" -eq 1 ]; then
					echo -n "${TXT_EXECUTION_MECHANISM_CRONJOB_DEINSTALLATION_INFO}";
				else
					echo -en "${SCurs}${TXT_EXECUTION_MECHANISM_CRONJOB_DEINSTALLATION_INFO}";
					echo -e "${RCurs}${MCurs}[ ${Whi}.. ${RCol}]\n";
				fi

				if [ -f "$CROND_PATH/TS3UpdateScript" ]; then
					rm $CROND_PATH/TS3UpdateScript
				fi

				if [[ $? -eq 0 ]]; then
					if [ "$PAR_CRONJOB_TASK" -eq 1 ]; then
						echo "[ OK ]";
					else
						echo -e "${RCurs}${MCurs}[ ${Gre}OK ${RCol}]\n";
					fi

					echo "${TXT_EXECUTION_MECHANISM_CRONJOB_DEINSTALLATION_SUCCESSFUL}: ${CROND_PATH}TS3UpdateScript";
				else
					if [ "$PAR_CRONJOB_TASK" -eq 1 ]; then
						echo "[ FAILED ]";
					else
						echo -e "${RCurs}${MCurs}[ ${Red}FAILED ${RCol}]\n";
					fi
				fi
			# Test inform online clients
			elif [[ "$PAR_TEST_INFORM_ONLINE_CLIENTS" -eq 1 ]]; then
				# Time measurement poke clients START
				TIME_MEASUREMENT_POKE_CLIENTS_START=$(date +%s)

				while read instanceInfo; do
					INSTANCE_PATH=$(echo "$instanceInfo" | grep -Ev "^#" | cut -d "|" -f 2)
					SERVERQUERY_IP=$(echo "$instanceInfo" | grep -Ev "^#" | cut -d "|" -f 12)
					SERVERQUERY_PORT="$(echo "$instanceInfo" | grep -Ev "^#" | cut -d "|" -f 13)"

					if [[ -n "$SERVERQUERY_IP" ]] && [[ -n "$SERVERQUERY_PORT" ]]; then
						if ts3server ${INSTANCE_PATH} status; then
							if [ "$PAR_CRONJOB_TASK" -eq 1 ]; then
								echo -n "${TXT_EXECUTION_MECHANISM_POKING_INFO}: ${INSTANCE_PATH}";
							else
								echo -en "${SCurs}${TXT_EXECUTION_MECHANISM_POKING_INFO}: ${INSTANCE_PATH}";
								echo -e "${RCurs}${MCurs}[ ${Whi}.. ${RCol}]\n";
							fi

							if pokeAllowedClients "${SERVERQUERY_IP}" "${SERVERQUERY_PORT}" $POKE_MESSAGE_ESCAPED; then
								if [ "$PAR_CRONJOB_TASK" -eq 1 ]; then
									echo "[ OK ]";
								else
									echo -e "${RCurs}${MCurs}[ ${Gre}OK ${RCol}]\n";
								fi
							else
								if [ "$PAR_CRONJOB_TASK" -eq 1 ]; then
									echo "[ FAILED ]";
								else
									echo -e "${RCurs}${MCurs}[ ${Red}FAILED ${RCol}]\n";
								fi

								echo "${TXT_EXECUTION_MECHANISM_POKE_MAY_FAILED}";
							fi
						fi
					fi
				done < TS3InstanceInfos.txt

				# Time measurement poke clients END
				TIME_MEASUREMENT_POKE_CLIENTS_END=$(date +%s)
			# All other actions
			else
				INSTANCE_COUNT="$(grep -Ev '^# Status' TS3InstanceInfos.txt | wc -l)"

				if [[ "$INSTANCE_COUNT" -eq 1 ]]; then
					echo "${INSTANCE_COUNT} ${TXT_EXECUTION_MECHANISM_UPDATING_ONE_INSTANCE_INFO}";
				else
					echo "${INSTANCE_COUNT} ${TXT_EXECUTION_MECHANISM_UPDATING_MORE_INSTANCES_INFO}";
				fi

				while read instanceInfo; do
					INSTANCE_PATH=$(echo "$instanceInfo" | grep -Ev "^#" | cut -d "|" -f 2)
					INSTALLED_TS3_SERVER_VERSION=$(echo "$instanceInfo" | grep -Ev "^#" | cut -d "|" -f 3)
					INSTALLED_TS3_SERVER_BUILD=$(echo "$instanceInfo" | grep -Ev "^#" | cut -d "|" -f 4)
					INSTALLED_TS3_SERVER_PLATFORM=$(echo "$instanceInfo" | grep -Ev "^#" | cut -d "|" -f 5)
					TS3SERVER_INSTANCE_LOG_PATH=$(echo "$instanceInfo" | grep -Ev "^#" | cut -d "|" -f 6)
					TS3SERVER_ARCHITECTURE=$(echo "$instanceInfo" | grep -Ev "^#" | cut -d "|" -f 7)
					OWNER=$(echo "$instanceInfo" | grep -Ev "^#" | cut -d "|" -f 8)
					OWNER_ID=$(echo "$instanceInfo" | grep -Ev "^#" | cut -d "|" -f 9)
					GROUP=$(echo "$instanceInfo" | grep -Ev "^#" | cut -d "|" -f 10)
					GROUP_ID=$(echo "$instanceInfo" | grep -Ev "^#" | cut -d "|" -f 11)
					SERVERQUERY_IP=$(echo "$instanceInfo" | grep -Ev "^#" | cut -d "|" -f 12)
					SERVERQUERY_PORT=$(echo "$instanceInfo" | grep -Ev "^#" | cut -d "|" -f 13)
					DATABASE_TYPE=$(echo "$instanceInfo" | grep -Ev "^#" | cut -d "|" -f 14)

					TSDNS_BINARY="tsdnsserver"

					if [[ -n "$INSTANCE_PATH" ]]; then
						if [[ "$INSTALLED_TS3_SERVER_VERSION" != "$LATEST_TS3_SERVER_VERSION" ]]; then
							if ts3server ${INSTANCE_PATH} status; then
								echo	"############################################################################";
								echo -e "	${TXT_EXECUTION_MECHANISM_UPDATE_QUESTION} ${LATEST_TS3_SERVER_VERSION}\n";

								echo	"	${TXT_EXECUTION_MECHANISM_INSTALLATION_DIRECTORY}: ${INSTANCE_PATH}";
								echo	"	${TXT_EXECUTION_MECHANISM_INSTALLED_VERSION}: ${INSTALLED_TS3_SERVER_VERSION} (${TXT_EXECUTION_MECHANISM_INSTALLED_BUILD}: ${INSTALLED_TS3_SERVER_BUILD})";
								echo	"	${TXT_EXECUTION_MECHANISM_INSTALLED_PLATFORM}: ${INSTALLED_TS3_SERVER_PLATFORM}";
								echo -e "	${TXT_EXECUTION_MECHANISM_INSTALLED_ARCHITECTURE}: ${TS3SERVER_ARCHITECTURE}\n";

								echo	"	${TXT_EXECUTION_MECHANISM_INSTANCE_LOG_FILES}: ${TS3SERVER_INSTANCE_LOG_PATH}";
								echo	"	${TXT_EXECUTION_MECHANISM_INSTANCE_TSDNS_BINARY}: ${INSTANCE_PATH}/tsdns/${TSDNS_BINARY}";
								echo -n "	${TXT_EXECUTION_MECHANISM_INSTANCE_TSDNS_STATUS}: ";

								if tsdns ${INSTANCE_PATH} status; then
									echo -e "${TXT_EXECUTION_MECHANISM_INSTANCE_TSDNS_STATUS_ACTIVE}\n";
								else
									echo -e "${TXT_EXECUTION_MECHANISM_INSTANCE_TSDNS_STATUS_INACTIVE}\n";
								fi
								

								echo	"	${TXT_EXECUTION_MECHANISM_OWNER_DETAILS}: ${OWNER} (${TXT_EXECUTION_MECHANISM_UID_DETAILS}: ${OWNER_ID})";
								echo -e "	${TXT_EXECUTION_MECHANISM_GROUP_DETAILS}: ${GROUP} (${TXT_EXECUTION_MECHANISM_GID_DETAILS}: ${GROUP_ID})\n";

								if [[ "$PAR_INFORM_ONLINE_CLIENTS" -eq 1 ]] || [[ $(checkdeps telnet expect) -eq 0 ]]; then
									echo	"	${TXT_EXECUTION_MECHANISM_SERVERQUERY_IP}: ${SERVERQUERY_IP}";
									echo -e "	${TXT_EXECUTION_MECHANISM_SERVERQUERY_PORT}: ${SERVERQUERY_PORT}\n";
								fi

								echo	"	${TXT_EXECUTION_MECHANISM_DATABASE_TYPE}: ${DATABASE_TYPE}";
								echo	"############################################################################";

								if [[ "$PAR_CRONJOB_TASK" -eq 1 ]]; then
									ANSWER="yes"
								else
									ANSWER=""
									while [[ "$ANSWER" == "" ]]; do
										read -p "${TXT_EXECUTION_MECHANISM_UPDATE_ANSWER} " ANSWER <&5

										if [[ -n "$ANSWER" ]] && [[ "$ANSWER" != "y" ]] && [[ "$ANSWER" != "yes" ]] && [[ "$ANSWER" != "n" ]] && [[ "$ANSWER" != "no" ]]; then
											echo -en "${SCurs}${TXT_EXECUTION_MECHANISM_UPDATE_ANSWER_ERROR}";
											echo -e "${RCurs}${MCurs}[ ${Red}ERROR ${RCol}]";
											ANSWER=""
										fi
									done
								fi

								# Run the update process, if the user want to
								if [[ "$ANSWER" == "y" ]] || [[ "$ANSWER" == "yes" ]]; then
									# Poke online clients
									if [[ "$PAR_INFORM_ONLINE_CLIENTS" -eq 1 ]]; then
										# Time measurement poke clients START
										TIME_MEASUREMENT_POKE_CLIENTS_START=$(date +%s)

										if [ "$PAR_CRONJOB_TASK" -eq 1 ]; then
											echo -n "${TXT_EXECUTION_MECHANISM_POKING_INFO}: ${INSTANCE_PATH}";
										else
											echo -en "${SCurs}${TXT_EXECUTION_MECHANISM_POKING_INFO}: ${INSTANCE_PATH}";
											echo -e "${RCurs}${MCurs}[ ${Whi}.. ${RCol}]\n";
										fi

										if pokeAllowedClients "${SERVERQUERY_IP}" "${SERVERQUERY_PORT}" $POKE_MESSAGE_ESCAPED; then
											if [ "$PAR_CRONJOB_TASK" -eq 1 ]; then
												echo "[ OK ]";
											else
												echo -e "${RCurs}${MCurs}[ ${Gre}OK ${RCol}]\n";
											fi
										else
											if [ "$PAR_CRONJOB_TASK" -eq 1 ]; then
												echo "[ FAILED ]";
											else
												echo -e "${RCurs}${MCurs}[ ${Red}FAILED ${RCol}]\n";
											fi

											echo "${TXT_EXECUTION_MECHANISM_POKE_MAY_FAILED}";
										fi

										# Time measurement poke clients END
										TIME_MEASUREMENT_POKE_CLIENTS_END=$(date +%s)
									fi
								
									# Wait some minutes
									if [[ "$PAR_WAITING_TIME_MINS" -ne 0 ]]; then
										echo "${PAR_WAITING_TIME_MINS} ${TXT_EXECUTION_MECHANISM_WAITING_INFO}";
										sleep ${PAR_WAITING_TIME_MINS}m
									elif [[ "$PAR_CRONJOB_TASK" -eq 1 ]] && [[ "$PAR_WAITING_TIME_IN_MINUTES" -eq 0 ]]; then
										PAR_WAITING_TIME_MINS=5;
										echo "${PAR_WAITING_TIME_MINS} ${TXT_EXECUTION_MECHANISM_WAITING_INFO}";
										sleep 5m
									fi

									## Backup temporary passwords
									if [[ "$PAR_DISABLE_TEMPORARY_PASSWORD_BACKUP" -eq 0 ]] && [[ $(checkdeps telnet expect) -eq 0 ]]; then
										echo "${TXT_EXECUTION_MECHANISM_GET_TEMPORARY_SERVER_PASSWORDS_INFO}";

										if getTemporaryServerPasswords "${SERVERQUERY_IP}" "${SERVERQUERY_PORT}"; then
											echo "${TXT_EXECUTION_MECHANISM_GET_TEMPORARY_SERVER_PASSWORDS_SUCCESSFUL}";
										else
											echo "${TXT_EXECUTION_MECHANISM_GET_TEMPORARY_SERVER_PASSWORDS_FAILED}";
										fi
									else
										echo "${TXT_EXECUTION_MECHANISM_TEMPORARY_SERVER_PASSWORDS_WERE_NOT_BACKUPED_INFO}";
									fi

									# Lock TeamSpeak 3 server instance for update process
									# Helper file to avoid automated restarrts of the instance by eg. systemd
									touch ${INSTANCE_PATH}/.ts3updatescript.lock

									## UPDATE PROCESS START ##
									# Stop TSDNS, if running
									if tsdns ${INSTANCE_PATH} status; then
										if tsdns ${INSTANCE_PATH} stop; then
											echo "${TXT_EXECUTION_MECHANISM_TSDNS_STOPPED}";

											# Stop TeamSpeak 3 server, if running
											if ts3server ${INSTANCE_PATH} status; then
												if ! ts3server ${INSTANCE_PATH} stop; then
													echo "${TXT_EXECUTION_MECHANISM_TS3SERVER_STOPPED}";

													# Make sure, that no ts3server.pid exists
													if [ -f "${INSTANCE_PATH}/ts3server.pid" ]; then
														echo "${TXT_EXECUTION_MECHANISM_DELETING_TS3SERVER_PID}";
														rm -f ${INSTANCE_PATH}/ts3server.pid
													fi

													# Delete old logs if parameter is set
													if [[ "$PAR_DELETE_OLD_LOGS" -eq 1 ]]; then
														echo "${TXT_EXECUTION_MECHANISM_DELETING_OLD_LOG_FILES}";
														find ${TS3SERVER_INSTANCE_LOG_PATH} -type f -name "*.log" -exec rm -f {} \;
													fi

													# Create backup of instance
													if backup ${INSTANCE_PATH} create ${DATABASE_TYPE}; then
														echo "${TXT_EXECUTION_MECHANISM_BACKUP_CREATED}";

														# Update instance
														if updateTeamSpeakInstance ${INSTANCE_PATH} ${LATEST_TS3_SERVER_VERSION}; then
															echo "${TXT_EXECUTION_MECHANISM_UPDATE_SUCCESSFUL}";

															# Start TSDNS
															if tsdns ${INSTANCE_PATH} start; then
																echo "${TXT_EXECUTION_MECHANISM_TSDNS_STARTED}";

																# Start TeamSpeak 3 server
																if ts3server ${INSTANCE_PATH} start; then
																	echo "${TXT_EXECUTION_MECHANISM_TS3SERVER_STARTED}";

																	if [[ -s SERVERTEMPPASSWORDLIST.txt ]]; then
																		# Wait a few seconds to be able to connect via telnet
																		sleep 5s

																		if setTemporaryServerPasswords "${SERVERQUERY_IP}" "${SERVERQUERY_PORT}" "${INSTANCE_PATH}"; then
																			echo "${TXT_EXECUTION_MECHANISM_SET_TEMPORARY_SERVER_PASSWORDS_SUCCESSFUL}";
																		else
																			echo "${TXT_EXECUTION_MECHANISM_SET_TEMPORARY_SERVER_PASSWORDS_FAILED}";
																		fi
																	fi

																	# Wait a few seconds
																	echo "${TXT_EXECUTION_MECHANISM_HEALTH_CHECK_INFO}";
																	sleep 15s

																	# Check TeamSpeak 3 server status
																	if ts3server ${INSTANCE_PATH} status; then
																		echo "${TXT_EXECUTION_MECHANISM_TS3SERVER_STILL_RUNNING}";
																	else
																		echo "${TXT_EXECUTION_MECHANISM_TS3SERVER_STOPPED_UNEXPECTED}";
																		EXECUTION_MECHANISM_STATUS=1;
																	fi

																	# Check TSDNS status
																	if tsdns ${INSTANCE_PATH} status; then
																		echo "${TXT_EXECUTION_MECHANISM_TSDNS_STILL_RUNNING}";
																	else
																		echo "${TXT_EXECUTION_MECHANISM_TSDNS_STOPPED_UNEXPECTED}";
																		EXECUTION_MECHANISM_STATUS=1;
																	fi
																else
																	echo "${TXT_EXECUTION_MECHANISM_TS3SERVER_START_FAILED}";
																	EXECUTION_MECHANISM_STATUS=1;
																fi
															else
																echo "${TXT_EXECUTION_MECHANISM_TSDNS_START_FAILED}";
																EXECUTION_MECHANISM_STATUS=1;
															fi
														else
															echo "${TXT_EXECUTION_MECHANISM_UPDATE_FAILED} '${INSTANCE_PATH}'?";
															EXECUTION_MECHANISM_STATUS=1;
														fi
													else
														echo "${TXT_EXECUTION_MECHANISM_BACKUP_FAILED}";
														EXECUTION_MECHANISM_STATUS=1;

														# Start TSDNS
														if tsdns ${INSTANCE_PATH} start; then
															echo "${TXT_EXECUTION_MECHANISM_TSDNS_STARTED}"

															# Start TeamSpeak 3 server
															if ts3server ${INSTANCE_PATH} start; then
																echo "${TXT_EXECUTION_MECHANISM_TS3SERVER_STARTED}";
															else
																echo "${TXT_EXECUTION_MECHANISM_TS3SERVER_START_FAILED}";
																EXECUTION_MECHANISM_STATUS=1;
															fi
														else
															echo "${TXT_EXECUTION_MECHANISM_TSDNS_START_FAILED}";
															EXECUTION_MECHANISM_STATUS=1;
														fi
													fi
												else
													echo "${TXT_EXECUTION_MECHANISM_UPDATE_NOT_POSSIBLE_TS3SERVER_STOP_FAILED_INFO}";
													EXECUTION_MECHANISM_STATUS=1;
												fi
											else
												# TS3 Server stopped
												echo "${TXT_EXECUTION_MECHANISM_HEALT_CHECK_FAILED_TS3SERVER_STOPPED_INFO}";
												EXECUTION_MECHANISM_STATUS=1;
											fi
										else
											echo "${TXT_EXECUTION_MECHANISM_UPDATE_NOT_POSSIBLE_TSDNS_STOP_FAILED_INFO}";
											EXECUTION_MECHANISM_STATUS=1;
										fi
									# TSDNS is not running
									else
										# Stop TeamSpeak 3 server, if running
										if ts3server ${INSTANCE_PATH} status; then
											if ! ts3server ${INSTANCE_PATH} stop; then
												echo "${TXT_EXECUTION_MECHANISM_TS3SERVER_STOPPED}";

												# Make sure, that no ts3server.pid exists
												if [ -f "${INSTANCE_PATH}/ts3server.pid" ]; then
													echo "${TXT_EXECUTION_MECHANISM_DELETING_TS3SERVER_PID}";
													rm -f ${INSTANCE_PATH}/ts3server.pid
												fi

												# Delete old logs if parameter is set
												if [[ "$PAR_DELETE_OLD_LOGS" -eq 1 ]]; then
													echo "${TXT_EXECUTION_MECHANISM_DELETING_OLD_LOG_FILES}";
													find ${TS3SERVER_INSTANCE_LOG_PATH} -type f -name "*.log" -exec rm -f {} \;
												fi

												# Create backup of instance
												if backup ${INSTANCE_PATH} create ${DATABASE_TYPE}; then
													echo "${TXT_EXECUTION_MECHANISM_BACKUP_CREATED}";

													# Update instance
													if updateTeamSpeakInstance ${INSTANCE_PATH} ${LATEST_TS3_SERVER_VERSION}; then
														echo "${TXT_EXECUTION_MECHANISM_UPDATE_SUCCESSFUL}";

														# Start TeamSpeak 3 server
														if ts3server ${INSTANCE_PATH} start; then
															echo "${TXT_EXECUTION_MECHANISM_TS3SERVER_STARTED}";

															if [[ -s SERVERTEMPPASSWORDLIST.txt ]]; then
																# Wait a few seconds to be able to connect via telnet
																sleep 5s

																if setTemporaryServerPasswords "${SERVERQUERY_IP}" "${SERVERQUERY_PORT}" "${INSTANCE_PATH}"; then
																	echo "${TXT_EXECUTION_MECHANISM_SET_TEMPORARY_SERVER_PASSWORDS_SUCCESSFUL}";
																else
																	echo "${TXT_EXECUTION_MECHANISM_SET_TEMPORARY_SERVER_PASSWORDS_FAILED}";
																fi
															fi

															# Wait a few seconds
															echo "${TXT_EXECUTION_MECHANISM_HEALTH_CHECK_INFO}";
															sleep 15s

															# Check TeamSpeak 3 server status
															if ts3server ${INSTANCE_PATH} status; then
																echo "${TXT_EXECUTION_MECHANISM_TS3SERVER_STILL_RUNNING}";
															else
																echo "${TXT_EXECUTION_MECHANISM_TS3SERVER_STOPPED_UNEXPECTED}";
																EXECUTION_MECHANISM_STATUS=1;
															fi
														else
															echo "${TXT_EXECUTION_MECHANISM_TS3SERVER_START_FAILED}";
															EXECUTION_MECHANISM_STATUS=1;
														fi
													else
														echo "${TXT_EXECUTION_MECHANISM_UPDATE_FAILED} '${INSTANCE_PATH}'?";
														EXECUTION_MECHANISM_STATUS=1;
													fi
												else
													echo "${TXT_EXECUTION_MECHANISM_BACKUP_FAILED}";
													EXECUTION_MECHANISM_STATUS=1;

													# Start TeamSpeak 3 server
													if ts3server ${INSTANCE_PATH} start; then
														echo "${TXT_EXECUTION_MECHANISM_TS3SERVER_STARTED}";

														if [[ -s SERVERTEMPPASSWORDLIST.txt ]]; then
															# Wait a few seconds to be able to connect via telnet
															sleep 5s

															if setTemporaryServerPasswords "${SERVERQUERY_IP}" "${SERVERQUERY_PORT}" "${INSTANCE_PATH}"; then
																echo "${TXT_EXECUTION_MECHANISM_SET_TEMPORARY_SERVER_PASSWORDS_SUCCESSFUL}";
															else
																echo "${TXT_EXECUTION_MECHANISM_SET_TEMPORARY_SERVER_PASSWORDS_FAILED}";
															fi
														fi
													else
														echo "${TXT_EXECUTION_MECHANISM_TS3SERVER_START_FAILED}";
														EXECUTION_MECHANISM_STATUS=1;
													fi
												fi
											else
												echo "${TXT_EXECUTION_MECHANISM_UPDATE_NOT_POSSIBLE_TS3SERVER_STOP_FAILED_INFO}";
												EXECUTION_MECHANISM_STATUS=1;
											fi
										else
											# TS3 Server stopped
											echo "${TXT_EXECUTION_MECHANISM_HEALT_CHECK_FAILED_TS3SERVER_STOPPED_INFO}";
											EXECUTION_MECHANISM_STATUS=1;
										fi
									fi
									## UPDATE PROCESS END ##

									## ROLLBACK PROCESS START ##
									# Rollback to version before
									if [[ "$EXECUTION_MECHANISM_STATUS" -eq 1 ]]; then
										# Create debug report
										if createDebugReport ${INSTANCE_PATH}; then
											echo "${TXT_EXECUTION_MECHANISM_DEBUG_REPORT_SUCCESSFUL} ${DEBUG_REPORT_FILE}";
										else
											echo "${TXT_EXECUTION_MECHANISM_DEBUG_REPORT_FAILED}";
										fi

										if backup ${INSTANCE_PATH} exists; then
											# Save instance log file content to debug file
											if [ ${PAR_DEBUG} -eq 1 ]; then
												set +x
												echo "### INSTANCE LOG ###";
												find ${INSTANCE_PATH}/logs/ -name *_0.log | sort -nr | head -1 | tr -d '\n' | xargs -0 cat;
												echo "### END INSTANCE LOG ###";
												set -x
											fi

											BACKUP_PATH="${TEMP_BACKUP_DIR}/TS3Tools/TS3UpdateScript/$(echo -n "${INSTANCE_PATH}/" | md5sum | cut -d " " -f 1)/"

											if backup ${INSTANCE_PATH} deploy ${DATABASE_TYPE}; then
												echo "${TXT_EXECUTION_MECHANISM_ROLLBACK_INFO} '${INSTALLED_TS3_SERVER_VERSION}'.";
												EXECUTION_MECHANISM_STATUS=0;

												# Start TeamSpeak 3 server
												if ts3server ${INSTANCE_PATH} start; then
													echo "${TXT_EXECUTION_MECHANISM_TS3SERVER_STARTED}";

													if [[ -s SERVERTEMPPASSWORDLIST.txt ]]; then
														# Wait a few seconds to be able to connect via telnet
														sleep 5s

														if setTemporaryServerPasswords "${SERVERQUERY_IP}" "${SERVERQUERY_PORT}" "${INSTANCE_PATH}"; then
															echo "${TXT_EXECUTION_MECHANISM_SET_TEMPORARY_SERVER_PASSWORDS_SUCCESSFUL}";
														else
															echo "${TXT_EXECUTION_MECHANISM_SET_TEMPORARY_SERVER_PASSWORDS_FAILED}";
														fi
													fi
												else
													echo "${TXT_EXECUTION_MECHANISM_TS3SERVER_START_FAILED}";
													EXECUTION_MECHANISM_STATUS=1;
												fi
											else
												echo "${TXT_EXECUTION_MECHANISM_UPDATE_AND_ROLLBACK_FAILED_INFO}: ${BACKUP_PATH}";
												EXECUTION_MECHANISM_STATUS=1;
											fi
										else
											echo "${TXT_EXECUTION_MECHANISM_ROLLBACK_FAILED}";
											EXECUTION_MECHANISM_STATUS=1;
										fi
									fi

									# Delete backup if parameter is not set
									if backup ${INSTANCE_PATH} exists; then
										if [[ "$PAR_KEEP_BACKUPS" -eq 0 ]] && [[ "$EXECUTION_MECHANISM_STATUS" -eq 0 ]]; then
											if backup ${INSTANCE_PATH} delete; then
												echo "${TXT_EXECUTION_MECHANISM_BACKUP_DELETED_INFO}";
											else
												echo "${TXT_EXECUTION_MECHANISM_DELETING_BACKUP_FAILED}";
											fi
										else
											BACKUP_PATH="${TEMP_BACKUP_DIR}/TS3Tools/TS3UpdateScript/$(echo -n "${INSTANCE_PATH}/" | md5sum | cut -d " " -f 1)/"
											echo "${TXT_EXECUTION_MECHANISM_BACKUP_DOES_STILL_EXISTS_INFO}: ${BACKUP_PATH}";
										fi
									fi

									# Delete lock of TeamSpeak 3 server instance for TS3Monitor
									if [[ -f ${INSTANCE_PATH}/.ts3updatescript.lock ]]; then
										rm ${INSTANCE_PATH}/.ts3updatescript.lock
									fi
								## ROLLBACK PROCESS END ##
								elif [[ "$ANSWER" == "n" ]] || [[ "$ANSWER" == "no" ]]; then
									echo "${TXT_EXECUTION_MECHANISM_TS3SERVER_NO_UPDATE_INFO}";
								fi
							else
								echo -e "\n${TXT_EXECUTION_MECHANISM_INSTANCE_STOPPED_UPDATE_NEEDED}: ${INSTANCE_PATH} (${TXT_EXECUTION_MECHANISM_INSTALLED_VERSION}: ${INSTALLED_TS3_SERVER_VERSION})";
							fi
						else
							echo "${INSTANCE_PATH}: ${TXT_EXECUTION_MECHANISM_TS3SERVER_ALREADY_UP2DATE}";
						fi
					fi
				done < TS3InstanceInfos.txt
			fi

			# Time measurement update mechanism END
			TIME_MEASUREMENT_EXECUTION_MECHANISM_END=$(date +%s)
		fi
	fi

	##
	## CLEANUP
	##
	# Time measurement cleanup START
	TIME_MEASUREMENT_CLEANUP_START=$(date +%s)

	echo -e "\n${TXT_CLEANUP_INFO}";

	if [ -f SELF_TEST_STATUS.txt ]; then
		rm SELF_TEST_STATUS.txt
	fi

	if [ -f COLLECTING_INFORMATION_STATUS.txt ]; then
		rm COLLECTING_INFORMATION_STATUS.txt
	fi

	if [ -f VALIDATION_STATUS.txt ]; then
		rm VALIDATION_STATUS.txt
	fi

	if [ -f TS3InstancePaths.txt ]; then
		rm TS3InstancePaths.txt;
	fi

	if [ -f TS3InstanceInfos.txt ]; then
		rm TS3InstanceInfos.txt
	fi

	if [ -f SERVERLIST.txt ]; then
		rm SERVERLIST.txt
	fi

	if [ -f CLIENTLIST.txt ]; then
		rm CLIENTLIST.txt
	fi

	if [ -f IGNORE_CLIENTLIST.txt ]; then
		rm IGNORE_CLIENTLIST.txt
	fi

	if [ -f POKELIST_UNSORTED.txt ]; then
		rm POKELIST_UNSORTED.txt
	fi

	if [ -f POKELIST.txt ]; then
		rm POKELIST.txt
	fi

	if [ -f SERVERTEMPPASSWORDLIST.txt ]; then
		rm SERVERTEMPPASSWORDLIST.txt
	fi

	if [ -f SERVERTEMPPASSWORDADD.txt ]; then
		rm SERVERTEMPPASSWORDADD.txt
	fi

	if [ -f wget-log ]; then
		rm wget-log
	fi

	if [ -d ${TEMP_BACKUP_DIR}/TS3Tools/TS3UpdateScript/ ]; then
		if [ ! "$(ls -A ${TEMP_BACKUP_DIR}/TS3Tools/TS3UpdateScript/)" ]; then
			rmdir ${TEMP_BACKUP_DIR}/TS3Tools/TS3UpdateScript/
		fi
	fi

	if [ -d ${TEMP_BACKUP_DIR}/TS3Tools/ ]; then
		if [ ! "$(ls -A ${TEMP_BACKUP_DIR}/TS3Tools/)" ]; then
			rmdir ${TEMP_BACKUP_DIR}/TS3Tools/
		fi
	fi

	if [ ${PAR_DEBUG} -eq 1 ]; then
		sed -i 's/\+ SERVERADMIN_PASSWORD=.*/\+ SERVERADMIN_PASSWORD=CENSORED_PASS/g' ${PAR_DEBUG_FILENAME}
	fi

	# Time measurement cleanup END
	TIME_MEASUREMENT_CLEANUP_END=$(date +%s)

	# Time measurement whole script END
	TIME_MEASUREMENT_SCRIPT_END=$(date +%s)

	##
	## STATISTICS
	##
	echo -e "\n${TXT_STATISTICS_INFO}";
	echo -n "${TXT_STATISTICS_TOTAL_SCRIPT}: "; getTimeDifference $TIME_MEASUREMENT_SCRIPT_START $TIME_MEASUREMENT_SCRIPT_END; echo "s";
	if [[ -n "$TIME_MEASUREMENT_SELFTESTS_START" ]] && [[ -n "$TIME_MEASUREMENT_SELFTESTS_END" ]]; then
		echo -n "${TXT_STATISTICS_SELF_TEST}: "; getTimeDifference $TIME_MEASUREMENT_SELFTESTS_START $TIME_MEASUREMENT_SELFTESTS_END; echo "s";
	fi
	if [[ "$SELF_TEST_STATUS" -eq 0 ]]; then
		if [[ "$PAR_INSTALL_CRONJOB" -eq 0 ]] && [[ "$PAR_DEINSTALL_CRONJOB" -eq 0 ]] && [[ "$PAR_UPDATE_SCRIPT" -eq 0 ]]; then
			echo -n "${TXT_STATISTICS_COLLECTING_INFORMATION}: "; getTimeDifference $TIME_MEASUREMENT_COLLECTING_INFORMATION_START $TIME_MEASUREMENT_COLLECTING_INFORMATION_END; echo "s";
			echo -n "${TXT_STATISTICS_VALIDATION}: "; getTimeDifference $TIME_MEASUREMENT_VALIDATION_START $TIME_MEASUREMENT_VALIDATION_END; echo "s";
		fi
		if [[ "$COLLECTING_INFORMATION_STATUS" -eq 0 ]] && [[ "$VALIDATION_STATUS" -eq 0 ]]; then
			echo -n "${TXT_STATISTICS_EXECUTION_MECHANISM}: "; getTimeDifference $TIME_MEASUREMENT_EXECUTION_MECHANISM_START $TIME_MEASUREMENT_EXECUTION_MECHANISM_END; echo "s";

			if [[ "$PAR_DISABLE_TEMPORARY_PASSWORD_BACKUP" -eq 0 ]] && [[ -n "$TIME_MEASUREMENT_GET_TEMPORARY_SERVER_PASSWORDS_START" ]]; then
				echo -n "${TXT_STATISTICS_GET_TEMPORARY_SERVER_PASSWORDS_MECHANISM}: "; getTimeDifference $TIME_MEASUREMENT_GET_TEMPORARY_SERVER_PASSWORDS_START $TIME_MEASUREMENT_GET_TEMPORARY_SERVER_PASSWORDS_END; echo "s";
				echo -n "${TXT_STATISTICS_FORMAT_TEMPORARY_SERVER_PASSWORDS_MECHANISM}: "; getTimeDifference $TIME_MEASUREMENT_FORMAT_TEMPORARY_SERVER_PASSWORDS_START $TIME_MEASUREMENT_FORMAT_TEMPORARY_SERVER_PASSWORDS_END; echo "s";
			fi

			if [[ "$PAR_INFORM_ONLINE_CLIENTS" -eq 1 ]] || [[ "$PAR_TEST_INFORM_ONLINE_CLIENTS" -eq 1 ]]; then
				if [[ -n "$TIME_MEASUREMENT_POKE_CLIENTS_START" ]]; then
					echo -n "${TXT_STATISTICS_POKE}: "; getTimeDifference $TIME_MEASUREMENT_POKE_CLIENTS_START $TIME_MEASUREMENT_POKE_CLIENTS_END; echo "s";
				fi
				if [[ -n "$TIME_MEASUREMENT_POKE_CLIENTS_REALTIME_START" ]]; then
					echo -n "${TXT_STATISTICS_POKE_REALTIME}: "; getTimeDifference $TIME_MEASUREMENT_POKE_CLIENTS_REALTIME_START $TIME_MEASUREMENT_POKE_CLIENTS_REALTIME_END; echo "s";
				fi
			fi
		fi
	fi
	echo -n "${TXT_STATISTICS_CLEANUP}: "; getTimeDifference $TIME_MEASUREMENT_CLEANUP_START $TIME_MEASUREMENT_CLEANUP_END; echo "s";

	echo -e "\n${TXT_SUPPORT_DEVELOPMENT}: https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=7ZRXLSC2UBVWE";

	# Restore stdin and close file descriptor 5
	exec 0<&5 5>&-

	unset TERM
}

##
## MAIN PROGRAM
##

# Time measurement whole script START
TIME_MEASUREMENT_SCRIPT_START=$(date +%s)

# Clear terminal screen, if this session is interactive
if [ -t 0 ]; then
	clearTerminalScreen
fi

# Get current installed script version
SCRIPT_VERSION=$(getCurrentScriptVersion)

echo -e "\nAbout: ${SOFTWARE_ABOUT}";
echo    "Author: ${SOFTWARE_AUTHOR} | Website: ${SOFTWARE_HOMEPAGE} | facebook: ${SOFTWARE_FACEBOOK}";
echo -e "License: ${SOFTWARE_LICENSE}\n";

echo	" _______ _____ ____  _              _";
echo	"|__   __/ ____|___ \| |            | |";
echo	"   | | | (___   __) | |_ ___   ___ | |___";
echo	"   | |  \___ \ |__ <| __/ _ \ / _ \| / __|";
echo	"   | |  ____) |___) | || (_) | (_) | \__ \\";
echo -e "   |_| |_____/|____/ \__\___/ \___/|_|___/\n";

echo	"Script Version: $SCRIPT_VERSION";

echo -e "Donate and support this script: https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=7ZRXLSC2UBVWE\n";

echo -e "------------------------------------------------------------------\n";

echo -e "Please wait... Script is working...\n";

##
## MENU / HELP
##

# If no option is set, show the usage message
if [ "$1" == "" ]; then
	echo "$SCRIPT_NAME: missing option";
	echo -e "\nMultiple option usage: ./${SCRIPT_NAME} [--check] [--delete-old-logs] [--inform-online-clients] [--set-release | --beta-release] [--install-cronjob]";
	echo -e "\nSingle option usage: ./${SCRIPT_NAME} [--test-inform-online-clients] | [--update-script] | [--deinstall-cronjob]";

	echo -e "\nTry './$SCRIPT_NAME --help' for more options.\n";

	exit 0;
fi

# Set default values for parameter/arguments
PAR_DISPLAY_SETTINGS=0;
PAR_CHECK=0;
PAR_DELETE_OLD_LOGS=0;
PAR_INFORM_ONLINE_CLIENTS=0;
PAR_TEST_INFORM_ONLINE_CLIENTS=0;
PAR_WAITING_TIME_IN_MINUTES=0;
PAR_WAITING_TIME_MINS=0;
PAR_DISABLE_TEMPORARY_PASSWORD_BACKUP=0;
PAR_KEEP_BACKUPS=0;
PAR_UPDATE_SCRIPT=0;
PAR_PATH=0;
PAR_PATH_DIRECTORY="/";
PAR_SET_RELEASE=0;
PAR_BETA_RELEASE=0;
PAR_DEACTIVATE_HOST_ALIVE_CHECK=0;
PAR_DEACTIVATE_PERMISSIONS_CHECK=0;
PAR_INSTALL_CRONJOB=0;
PAR_DEINSTALL_CRONJOB=0;
PAR_CRONJOB_TASK=0;
if [ ! -t 0 ]; then
	PAR_CRONJOB_TASK=1;
fi
LANGUAGE_CODE="$(grep 'DEFAULT_LANGUAGE' ${ABSOLUTE_PATH}/configs/config.all | cut -d '=' -f 2)";
if [[ -n "${LANGUAGE_CODE}" ]]; then
	if [[ -f "${ABSOLUTE_PATH}/languages/verified/${LANGUAGE_CODE}.conf" ]]; then
		PAR_LOCALE="languages/verified/${LANGUAGE_CODE}.conf";
	else
		PAR_LOCALE="languages/verified/en_US.conf";
	fi
else
	PAR_LOCALE="languages/verified/en_US.conf";
fi
PAR_DEBUG=0;

# Save parameter list
PAR_COUNTER=0;
PAR_LIST="$*";

# Check given arguments
while [ -n "$1" ]; do
	PAR_COUNTER=`expr $PAR_COUNTER + 1`;
	case $(echo "$1" | tr '[:upper:]' '[:lower:]') in
		-h | --help)
			echo -e "Usage: ./${SCRIPT_NAME} OPTION\(S\)\n";

			echo	"Available multi usable options:";
			echo -e "--check\t				Checks, if a newer version for your instance is available";
			echo	"--delete-old-logs			Deletes old TeamSpeak 3 server logs while update process";
			echo -e "--inform-online-clients\t		Sends the configured poke message to each online client on each virtual server, that the server will be updated (if you enter 'Yes, update!')";
			echo	"--keep-backups				Keep created backups by the script";
			echo	"--waiting-time-in-minutes <MINUTES>	Optionally the script can wait X minutes before it starts the update process";
			echo	"--disable-temporary-password-backup	Disable feature to backup temporary passwords";
			echo	"--set-release				Do not use the official latest release. Use instead the set release from the configuration file ${ABSOLUTE_PATH}/configs/config.all";
			echo	"--beta-release				With this parameter you are able to detect and update your TeamSpeak server to the latest beta release";
			echo	"--debug <DEBUG_FILENAME>		Enables debugging and writes output to file";
			echo -e "--install-cronjob <HOUR> <MINUTE>	Installs weekly cronjob for monday at your specified time (default: 3 AM (= 03:00 O'clock))\n";

			echo	"Available single usable options:";
			echo	"-h OR --help				Displays this help page";
			echo -e "-v OR --version\t			Displays version of this script";
			echo	"--display-settings			Displays settings from config files in ${ABSOLUTE_PATH}/configs/";
			echo	"--test-inform-online-clients		Execute test poke with current settings";
			echo -e "--update-script\t			Updates the TS3UpdateScript to the latest version";
			echo	"--deinstall-cronjob			Deinstalls weekly cronjob";

			exit 0;
		;;

		--24x7)
			echo -e "Usage: ./${SCRIPT_NAME} OPTION(S)\n";

			echo    "Available multi usable options:";
			echo -e "--check\t				Checks, if a newer version for your instance is available";
			echo    "--delete-old-logs			Deletes old TeamSpeak 3 server logs while update process";
			echo -e "--inform-online-clients\t		Sends the configured poke message to each online client on each virtual server, that the server will be updated (if you enter 'Yes, update!')";
			echo    "--keep-backups				Keep created backups by the script";
			echo    "--waiting-time-in-minutes <MINUTES>	Optionally the script can wait X minutes before it starts the update process";
			echo	"--disable-temporary-password-backup	Disable feature to backup temporary passwords";
			echo    "--set-release				Do not use the official latest release. Use instead the set release from the configuration file ${ABSOLUTE_PATH}/configs/config.all";
			echo    "--beta-release				With this parameter you are able to detect and update your TeamSpeak server to the latest beta release";
			echo -e "(--deactivate-host-alive-check)\t	Deactivates the part of self-test, which checks if all needed hosts are reachable. It is highly NOT recommended to use this parameter!";
			echo -e "(--deactivate-permissions-check)	Deactivates the part of detection, which checks if the server is running as another user as root";
			echo    "--debug <DEBUG_FILENAME>		Enables debugging and writes output to file";
			echo -e "--install-cronjob <HOUR> <MINUTE>	Installs weekly cronjob for monday at your specified time (default: 3 AM (= 03:00 O'clock))\n";

			echo    "Available single usable options:";
			echo    "-h OR --help				Displays the help page";
			echo -e "(--24x7)				Displays this help page with secret parameters. Secret parameters are marked with round brackets.";
			echo -e "-v OR --version\t			Displays version of this script";
			echo	"--display-settings			Displays settings from config files in ${ABSOLUTE_PATH}/configs/";
			echo    "--test-inform-online-clients		Execute test poke with current settings";
			echo -e "--update-script\t			Updates the TS3UpdateScript to the latest version";
			echo    "--deinstall-cronjob			Deinstalls weekly cronjob";
			
			exit 0;
		;;

		-v | --version)
			echo "$SCRIPT_VERSION";

			exit 0;
		;;

		--display-settings)
			PAR_DISPLAY_SETTINGS=1;
			shift;
		;;

		--check)
			PAR_CHECK=1;
			shift;
		;;

		--delete-old-logs)
			PAR_DELETE_OLD_LOGS=1;
			shift;
		;;

		--inform-online-clients)
			PAR_INFORM_ONLINE_CLIENTS=1;
			shift;
		;;

		--test-inform-online-clients)
			PAR_TEST_INFORM_ONLINE_CLIENTS=1;
			shift;
		;;

		--waiting-time-in-minutes)
			PAR_WAITING_TIME_IN_MINUTES=1;

			if [[ -n "$2" ]]; then
				if [[ "$2" =~ ^[0-9]+$ ]]; then
					PAR_WAITING_TIME_MINS=$2;
				else
					echo "Your set value '$2' is not allowed! Use integer instead. For example: --waiting-time 5";
					exit 1;
				fi
			else
				echo "Set the waiting time in minutes! For example: --waiting-time 5";
				exit 1;
			fi

			shift;
			shift;
		;;

		--disable-temporary-password-backup)
			PAR_DISABLE_TEMPORARY_PASSWORD_BACKUP=1;
			shift;
		;;

		--keep-backups)
			PAR_KEEP_BACKUPS=1;
			shift;
		;;

		--update-script)
			PAR_UPDATE_SCRIPT=1;
			shift;
		;;

		--path)
			PAR_PATH=1;

			if [[ -n "$2" ]]; then
				if [[ -d "$2" ]]; then
					if [[ -f "${2}/ts3server_startscript.sh" ]]; then
						PAR_PATH_DIRECTORY="$2";
					else
						echo "Your set directory '$2' is not a valid root directory of a TeamSpeak 3 server! Please set a correct one.";
						exit 1;
					fi
				else
					echo "Your set directory '$2' does not exist! Please set an existing one.";
					exit 1;
				fi
			else
				echo "Set the path to your TeamSpeak 3 server root directory! For example: --path /home/teamspeak/";
				exit 1;
			fi

			shift;
			shift;
		;;

		--set-release)
			PAR_SET_RELEASE=1;
			shift;
		;;

		--beta-release)
			PAR_BETA_RELEASE=1;
			shift;
		;;

		--install-cronjob)
			PAR_INSTALL_CRONJOB=1;
			if [[ -n "$2" ]] && [[ "$2" =~ [0-9]{1,2} ]]; then
				if [[ "$2" -ge 0 ]] && [[ "$2" -le 23 ]]; then
					PAR_CRONJOB_HOUR="$2";
					shift;
				else
					echo "'$2' is an invalid hour on the clock! Please use a positive number between 0 and 23.";
					exit 1;
				fi
			fi
			if [[ -n "$2" ]] && [[ "$2" =~ [0-9]{1,2} ]]; then
				if [[ "$2" -ge 0 ]] && [[ "$2" -le 59 ]]; then
					PAR_CRONJOB_MINUTE="$2";
					shift;
				else
					echo "'$2' is an invalid minute on the clock! Please use a positive number between 0 and 59.";
					exit 1;
				fi
			fi

			shift;
		;;

		--deinstall-cronjob)
			PAR_DEINSTALL_CRONJOB=1;
			shift;
		;;

		--deactivate-host-alive-check)
			PAR_DEACTIVATE_HOST_ALIVE_CHECK=1;
			shift;
		;;

		--deactivate-permissions-check)
			PAR_DEACTIVATE_PERMISSIONS_CHECK=1;
			shift;
		;;

		--debug)
			PAR_DEBUG=1;

			if [[ -n "$2" ]]; then
				if [[ ! -f "$2" ]]; then
					PAR_DEBUG_FILENAME="$2";
				else
					echo "This file does already exist! This script do not overwrite existing files. If you want to use this filename, you may should delete it.";
					exit 1;
				fi
			else
				echo "Specify the debug filename! For example: --debug error.txt";
				exit 1;
			fi

			shift;
			shift;
		;;

		*)
			echo "Unregonized option: $1";
			echo -e "\nUsage: ./$SCRIPT_NAME OPTION(S)\n";
			echo "Try './$SCRIPT_NAME --help' for more options.";

			exit 0;
		;;
	esac
done

# Given arguments allowed?
if [[ "$PAR_COUNTER" -eq 1 ]]; then
	if [[ "$PAR_CHECK" -eq 0 ]] && [[ "$PAR_UPDATE_SCRIPT" -eq 0 ]] && [[ "$PAR_DEINSTALL_CRONJOB" -eq 0 ]] && [[ "$PAR_TEST_INFORM_ONLINE_CLIENTS" -eq 0 ]] && [[ "$PAR_DISPLAY_SETTINGS" -eq 0 ]]; then
		echo "It is not allowed to use this parameter only!";
		exit 1;
	fi
elif [[ "$PAR_COUNTER" -eq 2 ]]; then
	if [[ "$PAR_UPDATE_SCRIPT" -eq 1 ]] && [[ "$PAR_CRONJOB_TASK" -eq 0 ]] || [[ "$PAR_TEST_INFORM_ONLINE_CLIENTS" -eq 1 ]] && [[ "$PAR_CHECK" -eq 1 ]] || [[ "$PAR_DEINSTALL_CRONJOB" -eq 1 ]] || [[ "$PAR_DISPLAY_SETTINGS" -eq 1 ]]; then
		echo "It is not allowed to use those both parameters at the same time!";
		exit 1;
	fi
elif [[ "$PAR_COUNTER" -gt 2 ]]; then
	if [[ "$PAR_HELP" -eq 1 ]] || [[ "$PAR_VERSION" -eq 1 ]] || [[ "$PAR_DEINSTALL_CRONJOB" -eq 1 ]] || [[ "$PAR_TEST_INFORM_ONLINE_CLIENTS" -eq 1 ]] || [[ "$PAR_DISPLAY_SETTINGS" -eq 1 ]]; then
		echo "This type of combination is not permitted!";
		exit 1;
	elif [[ "$PAR_SET_RELEASE" -eq 1 ]] && [[ "$PAR_BETA_RELEASE" -eq 1 ]]; then
		echo "You can not use the parameter '--set-release' and '--beta-release' at the same time!";
		exit 1;
	elif [[ "$PAR_CHECK" -eq 0 ]]; then
		echo "If you want to check/update your TeamSpeak 3 server instances, you should use '--check'.";
		exit 1;
	fi
fi

# Make sure that the script runs with root permissions
if [[ "$EUID" != 0 ]]; then
	echo "This action needs root permissions. Please enter your root password...";
	cd "$ABSOLUTE_PATH"
	su -s "$(which bash)" -c "./$SCRIPT_NAME $PAR_LIST"
	cd - > /dev/null

	exit 0;
fi

# Execute main program
if [ $PAR_DEBUG -eq 0 ]; then
	main
else
	main 2>&1 | tee "${PAR_DEBUG_FILENAME}" | grep -E -v '^\+ '
fi

exit 0;
